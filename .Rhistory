#highsest growth analysis
i <- 1
vectorHighestGrowthAnalysisResult <- c()
vectorInterpreterRes <- list()
vectorInterpreterIndex <- c()
vectorStartIndex <- c()
vectorEndIndex <- c()
vectorGrowth <- c()
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Growth")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestGrowth <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
highestInterpreterIndex <- max(vectorInterpreterIndex)
dfHighestGrowth <- dfHighestGrowth[dfHighestGrowth$vectorInterpreterIndex == 5,]
dfHighestGrowth$colName <- columnName[as.numeric(rownames(dfHighestGrowth))]
vectorSentenceHighestGrowth <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestGrowth, type = "Growth")
#highsest Decay analysis
i <- 1
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Decay")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestDecay <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
highestInterpreterIndex <- min(vectorInterpreterIndex)
dfHighestDecay <- dfHighestDecay[dfHighestDecay$vectorInterpreterIndex == 1,]
dfHighestDecay$colName <- columnName[as.numeric(rownames(dfHighestDecay))]
vectorSentenceHighestDecay <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestDecay, type = "Decay")
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreter2Last <- DataInterpreter(dataset2Last, statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
# RESUME LEXICAL PROCESS
i <- 1
vectorTrendDescriptionAnalysis <- c()
for(i in i:length(datasetWithoutDate)){
last2Index <- interpreter2Last$InterpreterIndex[i]
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
vectorSequenceIndex <- c(last2Index, lastIndex, nowIndex)
print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
# i=1;
# # Today
# for (i in i:length(columnName)) {
#   cat(" Today", columnName[i], " :", as.character(unlist(interpreterNow[i])), "\n\n")
# }
# i=1;
# # Last
# for (i in i:length(columnName)) {
#   cat(" Last", columnName[i], " :", as.character(unlist(interpreterLast[i])), "\n\n")
# }
# i=1;
# # Resume
# for (i in i:length(columnName)) {
#   cat(" Resume", columnName[i], " :", as.character(unlist(interpreterResume[i])), "\n\n")
# }
#eventIntro <- ReadIntro(type="Event")
#resumeEvent <- paste(eventIntro,"6 value from Xth to Yth")
i <- 1
maxValue <- 0
maxIndex <- 0
for(i in i:length(listRepeatedAnalysisResult)){
if(listRepeatedAnalysisResult[[i]]$RepValue > maxValue){
maxValue <- listRepeatedAnalysisResult[[i]]$RepValue
maxIndex <- i
}
}
if(maxValue != 0){
i <- 1
vectorRepeatedInterpretResult <- c()
selectedColumn <- columnName[maxIndex]
for(i in i:length(listRepeatedAnalysisResult[[maxIndex]]$Start)){
selectedIndex <-listRepeatedAnalysisResult[[maxIndex]]$Start[i]
selectedValue <- datasetWithoutDate[[selectedColumn]][selectedIndex]
print(selectedValue)
vectorRepeatedInterpretResult[[i]] <- DataInterpreterAdjective(selectedValue, selectedColumn, statisticalResume)$InterpreterResult
}
}
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste0(trendIntro," ",ResumeTrend(statisticalResume),".")
if(maxValue != 0){
resumeRepeated <- ResumeRepeated2(columnName[[maxIndex]], dataset, vectorRepeatedInterpretResult, listRepeatedAnalysisResult[[maxIndex]]$Start, listRepeatedAnalysisResult[[maxIndex]]$End)
resumeRepeated <- paste("There were some repeated value more than 4 days: ", resumeRepeated)
}else{
resumeRepeated <- "There were no repeating values within 4 days or more, every value changed from time to time."
}
resumeHighestGrowth <- AggResumeGrowth(vectorSentenceHighestGrowth, vectorSentenceHighestDecay)
resumeResult <- paste(resumeIntro, resumeTrend, resumeRepeated, resumeHighestGrowth)
#
currentIntro <- ReadCurrentIntro(dataset[nrow(dataset),"DateTime"], datasetInterval)
currentDesc <- CurrentDesc(interpreterNow, vectorTrendDescriptionAnalysis, datasetWithoutDate)
currentResult <- paste(currentIntro, currentDesc)
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
predictIntro <- ReadIntro(type="Predict")
# predictContent <- "Content content content."
# predictConc <- "Conclussion from predict result."
# currentResult <- paste(currentIntro, currentDesc, currentAglast, currentAgresume)
# currentResult <- paste(currentIntro, currentDesc)
# predictResult <- paste(predictIntro, predictContent, predictConc)
# source("D2T_Machine.R", local = TRUE)
resumeResult
currentResult
# predictResult
help(forcast)
help(forecast)
library('forecast')
help(forecast)
help(as.Date)
dataset[["DateTime"]]
tail(dataset)
tsObject <- xts(dataset[,-"DateTime"], order.by=as.Date(dataset[["DateTime"]]))
tsObject <- xts(dataset[,-"DateTime"], order.by=as.Date(dataset[["DateTime"]], "%m/%d/%Y %H:%M"))
colnames(dataset)
colnames(dataset) == "DateTime"
which(colnames(dataset) == "DateTime")
tsObject <- xts(dataset[,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[["DateTime"]], "%m/%d/%Y %H:%M"))
tsObject
result <- forecast((tsObject[[1]]), h=1)
result
tail(tsObject)
result <- forecast((tsObject[[1]]), h=1)$mean
result <- forecast((tsObject[[1]]), h=1)$mean
result
tsObject <- xts(dataset[-nrow(dataset),-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[["DateTime"]], "%m/%d/%Y %H:%M"))
tsObject <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[["DateTime"]], "%m/%d/%Y %H:%M"))
n <- nrow(dataset)
tsObject <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[["DateTime"]], "%m/%d/%Y %H:%M"))
tsObject <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,["DateTime"]], "%m/%d/%Y %H:%M"))
tsObject <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
tsObject
tail(tsObject)
result <- forecast((tsObject[[1]]), h=1)$mean
result
print(tsObject[[1]])
result <- forecast(tsObject[[1]], h=1)$mean
print(tsObject[1])
print(tsObject[,1])
tsObject <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
result <- forecast(tsObject[,1], h=1)$mean
result
tail(dataset)
result <- forecast(tsObject[,2], h=1)
result
result <- forecast(tsObject, h=1)
result <- forecast(tsObject[,3], h=1)
result
result$mean
PredictDataset<-function(dataset){
n <- nrow(dataset)
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
result <- forecast(dataSeries[,3], h=1)
result2 <- HoltWinters(dataSeries, beta=FALSE, gamma=FALSE)
print(tail(dataset))
print(tail(tsObject))
print(result)
print(resul2)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
n <- nrow(dataset)
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
result <- forecast(dataSeries[,3], h=1)
result2 <- HoltWinters(dataSeries, beta=FALSE, gamma=FALSE)
print(tail(dataset))
print(tail(tsObject))
print(result)
print(result2)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
n <- nrow(dataset)
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
result <- forecast(dataSeries[,1], h=1)
result2 <- HoltWinters(dataSeries[,1], beta=FALSE, gamma=FALSE)
print(tail(dataset))
print(tail(tsObject))
print(result)
print(result2)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
n <- nrow(dataset)
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
result <- forecast(dataSeries[,1], h=1)
result2 <- HoltWinters(dataSeries[,1], beta=0,2, gamma=FALSE)
print(tail(dataset))
print(tail(tsObject))
print(result)
print(result2)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
n <- nrow(dataset)
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
result <- forecast(dataSeries[,1], h=1)
result2 <- HoltWinters(dataSeries[,1], beta=0.2, gamma=FALSE)
print(tail(dataset))
print(tail(tsObject))
print(result)
print(result2)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
n <- nrow(dataset)
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
result <- forecast(dataSeries[,1], h=1)
result2 <- HoltWinters(dataSeries[,1], beta=0.1, gamma=FALSE)
print(tail(dataset))
print(tail(tsObject))
print(result)
print(result2)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
n <- nrow(dataset)
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
result <- forecast(dataSeries[,1], h=1)
result2 <- HoltWinters(dataSeries[,1], beta=FALSE, gamma=FALSE)
print(tail(dataset))
print(tail(tsObject))
print(result)
print(result2)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
n <- nrow(dataset)
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
result <- forecast(dataSeries[,1], h=1)
print(tail(dataset))
print(result)
}
PredictDataset(dataset)
lengthWithoutDate <-  length((dataset[,-which(colnames(dataset) == "DateTime")],)
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:length(dataset)){
}
result <- forecast(dataSeries[,1], h=1)
print(tail(dataset))
print(result)
}
PredictDataset(dataset)
lengthWithoutDate <-  length((dataset[,-which(colnames(dataset) == "DateTime")],)
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:length(dataset)){
}
result <- forecast(dataSeries[,1], h=1)
print(tail(dataset))
print(result)
}
PredictDataset(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")],)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
lengthWithoutDate
lenth(dataset)
length(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,1], h=1)
}
print(tail(dataset))
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,1], h=1)$mean
}
print(tail(dataset))
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(tail(dataset))
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(tail(nrow(dataset[,-which(colnames(dataset) == "DateTime")])))
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(dataset[nrow(dataset),-which(colnames(dataset) == "DateTime")])
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(dataset[nrow(dataset),-which(colnames(dataset) == "DateTime")])
print(dataSeries[nrow(dataSeries)],)
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- ts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(dataset[nrow(dataset),-which(colnames(dataset) == "DateTime")])
print(dataSeries[nrow(dataSeries)],)
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(dataset[nrow(dataset),-which(colnames(dataset) == "DateTime")])
print(dataSeries[nrow(dataSeries)],)
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(dataset[nrow(dataset),)
print(dataSeries[nrow(dataSeries)],)
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(dataset[nrow(dataset),])
print(dataSeries[nrow(dataSeries)],)
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(tail(2,dataset))
print(dataSeries[nrow(dataSeries)],)
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(tail(2,dataset))
print(dataSeries[nrow(dataSeries)],)
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
# print(tail(2, dataset))
print(dataSeries[nrow(dataSeries)],)
print(result)
}
PredictDataset(dataset)
tail(2, dataset)
tail(dataset, 2)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(tail(dataset,2))
print(dataSeries[nrow(dataSeries)],)
print(result)
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(tail(dataset,2))
print(dataSeries[nrow(dataSeries)],)
print(c("06/01/2018",result))
}
PredictDataset(dataset)
PredictDataset<-function(dataset){
result <- c()
n <- nrow(dataset)
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[-n,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[-n,"DateTime"], "%m/%d/%Y %H:%M"))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
print(tail(dataset,2))
print(dataSeries[nrow(dataSeries)],)
print(result)
}
PredictDataset(dataset)
help(forecast)
help(es)
library(smooth)
install.packages('smooth')
library(smooth)
installed.packages('greybox')
#3. Gradient Descent Packages
# install.packages(gradDescent)
library(gradDescent)
install.packages('greybox')
install.packages('greybox')
version
