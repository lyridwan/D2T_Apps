type == "Rainfall"){
corpus <- read.table(file=paste0("Corpus/",type,"Adjective.csv"), sep=",", header=TRUE)
if(type == "Temperature" || type == "Rainfall"){
result <- MembershipFuzzy(value, corpus);
}else{
result <- MembershipClassifier(value, corpus);
}
}else{
corpus <- read.table(file="Corpus/GeneralAdjective.csv", sep=",", header=TRUE)
result <- MembershipFuzzy(value, corpus);
}
print(corpus)
print(result)
return(result)
}
result <- DataInterpreterAdjective(25, type = "Temperature")
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 1;
n <- nrow(corpus);
m <- length(corpus) -1;
print(n);
print(m);
print(corpus)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
print(interval)
return(interval)
}
result <- DataInterpreterAdjective(25, type = "Temperature")
result <- DataInterpreterAdjective(25, type = "Temperature")
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 1;
n <- nrow(corpus);
m <- length(corpus) -1;
print(n);
print(m);
print(corpus)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
print(interval)
return(interval)
}
result <- DataInterpreterAdjective(25, type = "Temperature")
result <- DataInterpreterAdjective(25, type = "Temperature")
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
# i <- 1;
# n <- nrow(corpus);
# m <- length(corpus) -1;
# print(n);
# print(m);
print(corpus)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
print(interval)
return(interval)
}
result <- DataInterpreterAdjective(25, type = "Temperature")
dummyCorpus <- read.table(file=paste0("Corpus/","Temperature","Adjective.csv"), sep=",", header=TRUE)
dummyCorpus
result <- MembershipFuzzy(10, dummyCorpus);
print(dummyCorpus)
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 1;
n <- nrow(corpus);
m <- length(corpus) -1;
print(n);
print(m);
print(corpus)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
result <- DataInterpreterAdjective(25, type = "Temperature")
result <- DataInterpreterAdjective(25, type = "Temperature")
DataInterpreterAdjective <- function(value, type="General"){
if(type == "AirQuality" ||
type == "WindSpeed" ||
type == "WindDirection" ||
type == "CloudCoverage" ||
type == "Temperature" ||
type == "Rainfall"){
corpus <- read.table(file=paste0("Corpus/",type,"Adjective.csv"), sep=",", header=TRUE)
if(type == "Temperature" || type == "Rainfall"){
result <- MembershipFuzzy(value, corpus);
}else{
result <- MembershipClassifier(value, corpus);
}
}else{
corpus <- read.table(file="Corpus/GeneralAdjective.csv", sep=",", header=TRUE)
result <- MembershipFuzzy(value, corpus);
}
return(result)
}
result <- DataInterpreterAdjective(25, type = "Temperature")
asd <- c(1)
asd
dummyCorpus[1,1]
dummyCorpus[1,2]
dummyCorpus[1,4]
dummyCorpus[1,5]
asd <- c()
asd[1] <- a
asd[1] <- "asd"
asd[2] <- "asd2"
asd
asd <- c()
asd
result <- DataInterpreterAdjective(25, type = "Temperature")
result
result <- DataInterpreterAdjective(25, type = "Temperature")
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 2;
n <- nrow(corpus);
m <- length(corpus);
membership_value <- c()
for(i in i:n){
v1<-corpus[[i]]["v1"];
v2<-corpus[[i]]["v2"];
v3<-corpus[[i]]["v3"];
v4<-corpus[[i]]["v4"];
##/ ¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membership_value[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membership_value[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membership_value[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membership_value[i] <- 0;
}
}
#check highest membership result
print(asdasdasd)
return (membership_value)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
result <- DataInterpreterAdjective(25, type = "Temperature")
MembershipClassifier <- function(value, corpus){
sapply(value, function(v) corpus[v >= corpus["Lower"] & v < corpus["Upper"],"Category"])
}
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 2;
n <- nrow(corpus);
m <- length(corpus);
membership_value <- c()
for(i in i:n){
v1<-corpus[[i]]["v1"];
v2<-corpus[[i]]["v2"];
v3<-corpus[[i]]["v3"];
v4<-corpus[[i]]["v4"];
##/ ¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membership_value[i] <- (  (value-v1) / (v2-v1)  )
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membership_value[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membership_value[i] <- (  (v4-value) / (v4-v3)  )
#fourth, default condition (outside)
}else{
membership_value[i] <- 0;
}
}
#check highest membership result
print(asdasdasd)
return (membership_value)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
result <- DataInterpreterAdjective(25, type = "Temperature")
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 2;
n <- nrow(corpus);
m <- length(corpus);
membership_value <- c()
for(i in i:n){
v1<-corpus[[i]]["v1"];
v2<-corpus[[i]]["v2"];
v3<-corpus[[i]]["v3"];
v4<-corpus[[i]]["v4"];
##/ ¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membership_value[i] <- (  (value-v1) / (v2-v1)  )
#second area (optimum)
}else{
membership_value[i] <- 0;
}
}
#check highest membership result
print(asdasdasd)
return (membership_value)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
result <- DataInterpreterAdjective(25, type = "Temperature")
v1<-dummyCorpus[[2]]["v1"];
v1
v1<-dummyCorpus[2, "v1"];
v1
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 2;
n <- nrow(corpus);
m <- length(corpus);
membership_value <- c()
for(i in i:n){
v1<-corpus[i, "v1"];
v2<-corpus[i, "v2"];
v3<-corpus[i, "v3"];
v4<-corpus[i, "v4"];
##/ ¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membership_value[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membership_value[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membership_value[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membership_value[i] <- 0;
}
}
#check highest membership result
print(asdasdasd)
return (membership_value)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
result <- DataInterpreterAdjective(25, type = "Temperature")
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 2;
n <- nrow(corpus);
m <- length(corpus);
membership_value <- c()
for(i in i:n){
v1<-corpus[i, "v1"];
v2<-corpus[i, "v2"];
v3<-corpus[i, "v3"];
v4<-corpus[i, "v4"];
##/ ¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membership_value[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membership_value[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membership_value[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membership_value[i] <- 0;
}
}
#check highest membership result
return (membership_value)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
result <- DataInterpreterAdjective(25, type = "Temperature")
result
result <- DataInterpreterAdjective(19, type = "Temperature")
result
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 1;
n <- nrow(corpus);
m <- length(corpus);
membership_value <- c()
for(i in i:n){
v1<-corpus[i, "v1"];
v2<-corpus[i, "v2"];
v3<-corpus[i, "v3"];
v4<-corpus[i, "v4"];
##/ ¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membership_value[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membership_value[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membership_value[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membership_value[i] <- 0;
}
}
#check highest membership result
return (membership_value)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
result <- DataInterpreterAdjective(19, type = "Temperature")
result
which.max(result)
#check highest membership result
membershipResult <- corpus[which.max(membershipValue), "Category"]
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 1;
n <- nrow(corpus);
m <- length(corpus);
membershipValue <- c()
for(i in i:n){
v1<-corpus[i, "v1"];
v2<-corpus[i, "v2"];
v3<-corpus[i, "v3"];
v4<-corpus[i, "v4"];
##/ ¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membershipValue[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membershipValue[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membershipValue[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membershipValue[i] <- 0;
}
}
#check highest membership result
membershipResult <- corpus[which.max(membershipValue), "Category"]
return (membership_value)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
result <- DataInterpreterAdjective(19, type = "Temperature")
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 1;
n <- nrow(corpus);
m <- length(corpus);
membershipValue <- c()
for(i in i:n){
v1<-corpus[i, "v1"];
v2<-corpus[i, "v2"];
v3<-corpus[i, "v3"];
v4<-corpus[i, "v4"];
##/ ¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membershipValue[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membershipValue[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membershipValue[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membershipValue[i] <- 0;
}
}
#check highest membership result
membershipResult <- corpus[which.max(membershipValue), "Category"]
return (membershipResult)
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
result <- DataInterpreterAdjective(19, type = "Temperature")
result
datasetStatistical
dataset <- read.table(file="Datasets/2016-2017.csv", sep=",", header=TRUE)
PredictDataset<-function(dataset){
drops <- c("Date.Time")
datasetWithoutDate <- dataset[ , !(names(dataset) %in% drops)]
i=1; n=length(datasetWithoutDate)
x<-list()
y<-matrix()
for(i in i:n){
#change dataset into time-series dataset (XTS)
x[[i]] <- xts(datasetWithoutDate[[i]],order.by=as.POSIXct(dataset$Date.Time))
#forecast with (ETS)
y[i] <- forecast(x[[i]],h=1)$mean[1]
}
i=1
for(i in i:n){
names(y)[i]<-paste(colnames(datasetWithoutDate[i]))
}
y<-t(y)
y<-data.frame(y)
return(y)
}
predictionResult <- PredictDataset(dataset)
#Interval time on dataset
timeInterval <- difftime(dataset[nrow(dataset),"Date.Time"], dataset[1,"Date.Time"], units = "hours")
SignalAnalysis <- function(dataset){
ColName <- SumValue <- Average <- MaxValue <- MaxIndex <- MaxDate <- MinValue <- MinIndex <- MinDate <- c("")
i=2
n=length(dataset)
for(i in i:n){
ColName[i] <- colnames(dataset[i])
#MAX
MaxValue[i] <- max(dataset[i])
max_index2 <- as.integer(which(dataset[i]==max(dataset[i])))
MaxIndex[i] <- max_index2[1]
max_index0 <- max_index2[1]
MaxDate[i] <- as.character(dataset$Date[max_index0])
#MIN
MinValue[i] <- min(dataset[i])
min_index2 <- as.integer(which(dataset[i]==min(dataset[i])))
MinIndex[i] <- min_index2[1]
min_index0 <- min_index2[1]
MinDate[i] <- as.character(dataset$Date[min_index0])
#SUM
SumValue[i] <- sum(dataset[,i])
#AVERAGE
Average[i] <- mean(dataset[,i])
}
datasetStatistical <- data.frame(ColName, MaxDate, MaxValue, MaxIndex, MinDate, MinValue, MinIndex, SumValue, Average);
print(datasetStatistical)
return(datasetStatistical)
}
datasetStatistical <- SignalAnalysis(dataset)
help(colMeans)
asdasd <- colMeans(dataset)
asdasd <- colMeans(dataset[!"DateTime",])
asdasd <- colMeans(dataset[,!"DateTime"])
asdasd <- colMeans(dataset[,!(names(dataClimates) %in% "DateTime"])
asdasd <- colMeans(dataset[,!(names(dataClimates) %in% c("DateTime")])
asdasd <- colMeans(dataset[,!(names(datest) %in% "DateTime"])
asdasd <- colMeans(dataset[,!(names(dataset) %in% "DateTime"])
asdasd <- colMeans(dataset[,!(names(dataset) %in% "DateTime")])
dataset
asdasd <- colMeans(dataset[,!(names(dataset) %in% "DateTime")])
dataset <- read.table(file="Datasets/2016-2017.csv", sep=",", header=TRUE)
dataset <- read.table(file="Datasets/2016-2017.csv", sep=",", header=TRUE)
dataset
asdasd
asdasd <- colMeans(dataset[,!(names(dataset) %in% "DateTime")])
asdasd
asdasd[1]
asdasd["CloudCoverage"]
View(predictionResult)
View(datasetStatistical)
