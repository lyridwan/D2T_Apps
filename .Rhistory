list(clusters=clusterHistory, centers=centerHistory)
}
#use iris data++++
dfDataset=iris[, 1:4] # A data.frame
#turn into a matrix
matrixDataset=as.matrix(dfDataset)
#itarate clustering for 5 time
centers <- matrixDataset[sample(nrow(matrixDataset), 3),]
print(centers)
distsToCenters <- euclid(matrixDataset, centers)
print(distsToCenters)
clusters <- apply(distsToCenters, 1, which.min)
print(clusters)
centers <- apply(matrixDataset, 2, tapply, clusters, mean)
print(centers)
A
a=c(1,2,3,4
a
a=c(1,2,3,4)
a
rm(list=ls())
distsToCenters <- euclid(matrixDataset, centers)
#create function to calculate euqlidian distances
euclid <- function(points1, points2) {
distanceMatrix <- matrix(NA, nrow=dim(points1)[1], ncol=dim(points2)[1])
for(i in 1:nrow(points2)) {
distanceMatrix[,i] <- sqrt(rowSums(t(t(points1)-points2[i,])^2))
}
distanceMatrix
}
#create function for clustering
K_means <- function(x, nCluster, nItter) {
#sample some centers, 3 for example
centers <- ktest[sample(nrow(ktest), 3),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(x, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(x, 2, tapply, clusters, mean)
# Saving history
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
}
li
distsToCenters <- euclid(matrixDataset, centers)
clusters <- apply(distsToCenter[1,], 1, which.min)
clusters
clusters
print(clusters)
clusters <- apply(distsToCenter[1:2,], 1, which.min)
print(clusters)
clusters <- apply(distsToCenter, 1, which.min)
clusters
distsToCenter
distsToCenters <- euclid(matrixDataset, centers)
distsToCenter
#create function to calculate euqlidian distances
euclid <- function(points1, points2) {
distanceMatrix <- matrix(NA, nrow=dim(points1)[1], ncol=dim(points2)[1])
for(i in 1:nrow(points2)) {
distanceMatrix[,i] <- sqrt(rowSums(t(t(points1)-points2[i,])^2))
}
distanceMatrix
}
#create function for clustering
K_means <- function(x, nCluster, nItter) {
#sample some centers, 3 for example
centers <- ktest[sample(nrow(ktest), 3),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(x, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(x, 2, tapply, clusters, mean)
# Saving history
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
}
list(clusters=clusterHistory, centers=centerHistory)
}
#use iris data++++
dfDataset=iris[, 1:4] # A data.frame
#turn into a matrix
matrixDataset=as.matrix(dfDataset)
#itarate clustering for 5 time
centers <- matrixDataset[sample(nrow(matrixDataset), 3),]
print(centers)
distsToCenters <- euclid(matrixDataset, centers)
distsToCenter
distsToCenters
#create function to calculate euqlidian distances
euclid <- function(points1, points2) {
distanceMatrix <- matrix(NA, nrow=dim(points1)[1], ncol=dim(points2)[1])
for(i in 1:nrow(points2)) {
distanceMatrix[,i] <- sqrt(rowSums(t(t(points1)-points2[i,])^2))
}
distanceMatrix
}
#create function for clustering
K_means <- function(x, nCluster, nItter) {
#sample some centers, 3 for example
centers <- ktest[sample(nrow(ktest), 3),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(x, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(x, 2, tapply, clusters, mean)
# Saving history
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
}
list(clusters=clusterHistory, centers=centerHistory)
}
#use iris data++++
dfDataset=iris[, 1:4] # A data.frame
#turn into a matrix
matrixDataset=as.matrix(dfDataset)
#itarate clustering for 5 time
centers <- matrixDataset[sample(nrow(matrixDataset), 3),]
print(centers)
distsToCenters <- euclid(matrixDataset, centers)
print(distsToCenters)
dfDataset
rm(list=ls())
rm(list=ls())
help
exit
#create function to calculate euqlidian distances
euclid <- function(points1, points2) {
distanceMatrix <- matrix(NA, nrow=dim(points1)[1], ncol=dim(points2)[1])
for(i in 1:nrow(points2)) {
distanceMatrix[,i] <- sqrt(rowSums(t(t(points1)-points2[i,])^2))
}
distanceMatrix
}
#create function for clustering
K_means <- function(x, nCluster, nItter) {
#sample some centers, 3 for example
centers <- ktest[sample(nrow(ktest), 3),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(x, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(x, 2, tapply, clusters, mean)
# Saving history
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
}
list(clusters=clusterHistory, centers=centerHistory)
}
#use iris data++++
dfDataset=iris[, 1:4] # A data.frame
#turn into a matrix
matrixDataset=as.matrix(dfDataset)
#itarate clustering for 5 time
#create function to calculate euqlidian distances
euclid <- function(points1, points2) {
distanceMatrix <- matrix(NA, nrow=dim(points1)[1], ncol=dim(points2)[1])
for(i in 1:nrow(points2)) {
distanceMatrix[,i] <- sqrt(rowSums(t(t(points1)-points2[i,])^2))
}
distanceMatrix
}
#create function for clustering
K_means <- function(x, nCluster, nItter) {
#sample some centers, 3 for example
centers <- ktest[sample(nrow(ktest), 3),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(x, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(x, 2, tapply, clusters, mean)
# Saving history
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
}
list(clusters=clusterHistory, centers=centerHistory)
}
#use iris data++++
dfDataset=iris[, 1:4] # A data.frame
#turn into a matrix
matrixDataset=as.matrix(dfDataset)
#itarate clustering for 5 time
centers <- matrixDataset[sample(nrow(matrixDataset), 3),]
print(centers)
distsToCenters <- euclid(matrixDataset, centers)
print(distsToCenters)
clusters <- apply(distsToCenters[1.], 1, which.min)
clusters <- apply(distsToCenters[1,], 1, which.min)
distsToCenters[1.]
distsToCenters[1,]
distsToCenters[1:2,]
clusters <- apply(distsToCenters[1:2,], 1, which.min)
clusters
clusters <- apply(distsToCenters[1:2,], 1, min)
clusters
distanceMatrix <- matrix(NA, nrow=dim(matrixDataset)[1], ncol=dim(centers)[1])
distanceMatrix
help
help(t)
t(matrixDataset)
View(t(matrixDataset))
View((matrixDataset))
View(centers)
View(centers)
View(centers[i,])
View(centers[1,])
View(centers[1,]^2)
View(centers[1,])
View(t(matrixDataset)-centers[1,]^2)
View(t(t(matrixDataset)-centers[1,]^2))
View(centers)
View(rowSums(t(t(matrixDataset)-centers[1,]^2)))
View(sqrt(rowSums(t(t(matrixDataset)-centers[1,]^2))))
View(sqrt(rowSums(t(t(matrixDataset)-centers[1,])^2)))
View(rowSums(t(t(matrixDataset)-centers[1,]^2)))
sqrt(-62.36)
View(rowSums(t(t(matrixDataset[1,])-centers[1,]^2)))
View(rowSums(t(t(matrixDataset)-centers[1,]^2)))
View(rowSums(t(t(matrixDataset)-centers[1,])^2)))
View((t(t(matrixDataset)-centers[i,])^2))
View((t(t(matrixDataset)-centers[1,])^2))
View(t(matrixDataset)-centers[1,])
View(t(matrixDataset)-centers[1,])
View(centers)
View(dfDataset)
View(t(matrixDataset[1:3,])-c(1,2,3))
View(t(matrixDataset[1:3,]))
View(c(1,2,3))
View(dfDataset)
View(t(matrixDataset[1:3,])-t(c(1,2,3)))
View(t(matrixDataset[1:3,])-matrix(1,c(1,2,3)))
help("matrix-class")
matrix(c(1,2,3), nrow=1, ncol=3)
matrixx <- matrix(c(1,2,3), nrow=1, ncol=3)
View(t(matrixDataset[1:3,])-matrixx)
View(t(matrixDataset[1:3,])-matrixx[1,])
View(t(matrixDataset[1:3,]))
View(centers)
matrixx <- matrix(c(1,2,3,4), nrow=1, ncol=4)
View(t(matrixDataset[1:3,])-matrixx)
View(t(matrixDataset[1:3,])-matrixx[1,])
View(t(matrixDataset[1:3,]))
View(matrixx)
#create function to calculate euqlidian distances
euclid <- function(points1, points2) {
distanceMatrix <- matrix(NA, nrow=dim(points1)[1], ncol=dim(points2)[1])
for(i in 1:nrow(points2)) {
distanceMatrix[,i] <- sqrt(rowSums(t(t(points1)-points2[i,])^2))
}
distanceMatrix
}
#create function for clustering
K_means <- function(x, nCluster, nItter) {
#sample some centers, 3 for example
centers <- ktest[sample(nrow(ktest), 3),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(x, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(x, 2, tapply, clusters, mean)
# Saving history
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
}
list(clusters=clusterHistory, centers=centerHistory)
}
#use iris data++++
dfDataset=iris[, 1:4] # A data.frame
#turn into a matrix
matrixDataset=as.matrix(dfDataset)
#itarate clustering for 5 time
centers <- matrixDataset[sample(nrow(matrixDataset), 3),]
print(centers)
distsToCenters <- euclid(matrixDataset, centers)
print(distsToCenters)
clusters <- apply(distsToCenters, 1, which.min)
print(clusters)
centers <- apply(matrixDataset, 2, tapply, clusters, mean)
print(centers)
help(tapply)
tapply(matrixDataset, 2, mean)
centers <- apply(x, 2, tapply, clusters, max)
centers <- apply(matrixDataset, 2, tapply, clusters, max)
centers
View(matrixDataset)
centers <- apply(matrixDataset, 2, tapply, clusters, which.max)
centers
clusters
centers <- apply(matrixDataset, 2, tapply, clusters, which.min)
centers
centers <- apply(matrixDataset, 2, tapply, clusters, min)
centers
tapply(clusters,2,min)
View(matrixDataset)
#create function to calculate euqlidian distances
euclid <- function(points1, points2) {
distanceMatrix <- matrix(NA, nrow=dim(points1)[1], ncol=dim(points2)[1])
for(i in 1:nrow(points2)) {
distanceMatrix[,i] <- sqrt(rowSums(t(t(points1)-points2[i,])^2))
}
distanceMatrix
}
#create function for clustering
K_means <- function(dataSet, k, nItter) {
#sample some centers, 3 for example
centers <- ktest[sample(nrow(ktest), k),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(dataSet, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(dataSet, 2, tapply, clusters, mean)
# Saving history
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
}
list(clusters=clusterHistory, centers=centerHistory)
}
#use iris data++++
dfDataset=iris[, 1:4] # A data.frame
#turn into a matrix
matrixDataset=as.matrix(dfDataset)
#itarate clustering for 5 time
res <- K_means(ktest, centers, euclid, 5)
res <- K_means(ktest, 2, 1000)
res <- K_means(matrixDataset, 2, 1000)
res <- K_means(matrixDataset, 2, 1000)
#create function to calculate euqlidian distances
euclid <- function(points1, points2) {
distanceMatrix <- matrix(NA, nrow=dim(points1)[1], ncol=dim(points2)[1])
for(i in 1:nrow(points2)) {
distanceMatrix[,i] <- sqrt(rowSums(t(t(points1)-points2[i,])^2))
}
distanceMatrix
}
#create function for clustering
K_means <- function(dataSet, k, nItter) {
#sample some centers, 3 for example
centers <- ktest[sample(nrow(dataSet), k),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(dataSet, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(dataSet, 2, tapply, clusters, mean)
# Saving history
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
}
list(clusters=clusterHistory, centers=centerHistory)
}
res <- K_means(matrixDataset, 2, 1000)
rm(list=ls())
res <- K_means(matrixDataset, 2, 1000)
#create function to calculate euqlidian distances
euclid <- function(points1, points2) {
distanceMatrix <- matrix(NA, nrow=dim(points1)[1], ncol=dim(points2)[1])
for(i in 1:nrow(points2)) {
distanceMatrix[,i] <- sqrt(rowSums(t(t(points1)-points2[i,])^2))
}
distanceMatrix
}
#create function for clustering
K_means <- function(dataSet, k, nItter) {
#sample some centers, 3 for example
centers <- ktest[sample(nrow(dataSet), k),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(dataSet, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(dataSet, 2, tapply, clusters, mean)
# Saving history
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
}
list(clusters=clusterHistory, centers=centerHistory)
}
#use iris data++++
dfDataset=iris[, 1:4] # A data.frame
#turn into a matrix
matrixDataset=as.matrix(dfDataset)
#itarate clustering for 5 time
res <- K_means(matrixDataset, 2, 1000)
#create function for clustering
K_means <- function(dataSet, k, nItter) {
#sample some centers, 3 for example
centers <- dataSet[sample(nrow(dataSet), k),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(dataSet, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(dataSet, 2, tapply, clusters, mean)
# Saving history
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
}
list(clusters=clusterHistory, centers=centerHistory)
}
res <- K_means(matrixDataset, 2, 1000)
res
#create function to calculate euqlidian distances
euclid <- function(points1, points2) {
distanceMatrix <- matrix(NA, nrow=dim(points1)[1], ncol=dim(points2)[1])
for(i in 1:nrow(points2)) {
distanceMatrix[,i] <- sqrt(rowSums(t(t(points1)-points2[i,])^2))
}
distanceMatrix
}
#create function for clustering
K_means <- function(dataSet, k, nItter) {
#sample some centers, 3 for example
centers <- dataSet[sample(nrow(dataSet), k),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(dataSet, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(dataSet, 2, tapply, clusters, mean)
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
# Saving history
if(i!=1 && clusterHistory[i]!=clusterHistory[i-1]){
return(list(clusters=clusterHistory, centers=centerHistory))
}
}
list(clusters=clusterHistory, centers=centerHistory)
}
res <- K_means(matrixDataset, 2, 1000)
#create function to calculate euqlidian distances
euclid <- function(points1, points2) {
distanceMatrix <- matrix(NA, nrow=dim(points1)[1], ncol=dim(points2)[1])
for(i in 1:nrow(points2)) {
distanceMatrix[,i] <- sqrt(rowSums(t(t(points1)-points2[i,])^2))
}
distanceMatrix
}
#create function for clustering
K_means <- function(dataSet, k, nItter) {
#sample some centers, 3 for example
centers <- dataSet[sample(nrow(dataSet), k),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(dataSet, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(dataSet, 2, tapply, clusters, mean)
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
# Saving history
if(i!=1 && clusterHistory[i]==clusterHistory[i-1]){
return(list(clusters=clusterHistory, centers=centerHistory))
}
}
list(clusters=clusterHistory, centers=centerHistory)
}
res <- K_means(matrixDataset, 2, 1000)
res <- K_means(matrixDataset, 2, 10)
res
#create function for clustering
K_means <- function(dataSet, k, nItter) {
#sample some centers, 3 for example
centers <- dataSet[sample(nrow(dataSet), k),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(dataSet, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(dataSet, 2, tapply, clusters, mean)
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
# Saving history
if(i!=1 && clusterHistory[[i]]==clusterHistory[[i-1]]){
return(list(clusters=clusterHistory, centers=centerHistory))
}
}
list(clusters=clusterHistory, centers=centerHistory)
}
res <- K_means(matrixDataset, 2, 1000)
#create function for clustering
K_means <- function(dataSet, k, nItter) {
#sample some centers, 3 for example
centers <- dataSet[sample(nrow(dataSet), k),]
clusterHistory <- vector(nItter, mode="list")
centerHistory <- vector(nItter, mode="list")
for(i in 1:nItter) {
distsToCenters <- euclid(dataSet, centers)
clusters <- apply(distsToCenters, 1, which.min)
centers <- apply(dataSet, 2, tapply, clusters, mean)
clusterHistory[[i]] <- clusters
centerHistory[[i]] <- centers
itter <- i;
# Saving history
if(i!=1 && clusterHistory[[i]]==clusterHistory[[i-1]]){
return(list(clusters=clusterHistory, centers=centerHistory, itteration=itter))
}
}
list(clusters=clusterHistory, centers=centerHistory)
}
res <- K_means(matrixDataset, 2, 1000)
res
help(forecast)
help(??forecast)
help(forecast)
setwd("C:/Users/ASUS X550D/Desktop/SKRIPSI/Resource FIle/Apps/D2T_Apps")
