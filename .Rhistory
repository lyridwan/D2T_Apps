vectorHighestGrowthAnalysisResult <- c()
vectorInterpreterRes <- list()
vectorInterpreterIndex <- c()
vectorStartIndex <- c()
vectorEndIndex <- c()
vectorGrowth <- c()
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Growth")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestGrowth <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
dfHighestGrowth$type <- mainConfig$Type
highestInterpreterIndex <- max(vectorInterpreterIndex)
dfHighestGrowth <- dfHighestGrowth[dfHighestGrowth$vectorInterpreterIndex == 5 ,]
dfHighestGrowth <- dfHighestGrowth[dfHighestGrowth$type == "numeric" ,]
dfHighestGrowth$colName <- columnName[as.numeric(rownames(dfHighestGrowth))]
vectorSentenceHighestGrowth <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestGrowth, type = "Growth")
#highsest Decay analysis
i <- 1
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Decay")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestDecay <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
dfHighestDecay$type <- mainConfig$Type
highestInterpreterIndex <- min(vectorInterpreterIndex)
dfHighestDecay <- dfHighestDecay[dfHighestDecay$vectorInterpreterIndex == 1,]
dfHighestDecay <- dfHighestDecay[dfHighestDecay$type == "numeric" ,]
dfHighestDecay$colName <- columnName[as.numeric(rownames(dfHighestDecay))]
vectorSentenceHighestDecay <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestDecay, type = "Decay")
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreter2Last <- DataInterpreter(dataset2Last, statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
interpreterPredict <- DataInterpreter(datasetPredicted,statisticalResume)
# RESUME LEXICAL PROCESS
i <- 1
vectorTrendDescriptionAnalysis <- c()
for(i in i:length(datasetWithoutDate)){
last2Index <- interpreter2Last$InterpreterIndex[i]
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
vectorSequenceIndex <- c(last2Index, lastIndex, nowIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
i <- 1
maxValue <- 0
maxIndex <- 0
for(i in i:length(listRepeatedAnalysisResult)){
if(listRepeatedAnalysisResult[[i]]$RepValue > maxValue){
maxValue <- listRepeatedAnalysisResult[[i]]$RepValue
maxIndex <- i
}
}
if(maxValue != 0){
i <- 1
vectorRepeatedInterpretResult <- c()
selectedColumn <- columnName[maxIndex]
for(i in i:length(listRepeatedAnalysisResult[[maxIndex]]$Start)){
selectedIndex <-listRepeatedAnalysisResult[[maxIndex]]$Start[i]
selectedValue <- datasetWithoutDate[[selectedColumn]][selectedIndex]
# print(selectedValue)
vectorRepeatedInterpretResult[[i]] <- DataInterpreterAdjective(selectedValue, selectedColumn, statisticalResume)$InterpreterResult
}
}
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste0(trendIntro," ",ResumeTrend(statisticalResume))
resumeRepeatedLimit <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
resumeRepeatedInterval <- paste0(DataInterpreterInterval(datasetIntervalValue, type = "default"), "s")
if(maxValue != 0){
resumeRepeated <- ResumeRepeated2(columnName[[maxIndex]], dataset, vectorRepeatedInterpretResult, listRepeatedAnalysisResult[[maxIndex]]$Start, listRepeatedAnalysisResult[[maxIndex]]$End)
resumeRepeated <- paste("There were some repeating value more than @limit @interval: ", resumeRepeated)
}else{
resumeRepeated <- "There were no repeating values within @limit @interval or more, every value changed from time to time."
}
resumeRepeated <- gsub("@limit", resumeRepeatedLimit, resumeRepeated)
resumeRepeated <- gsub("@interval", resumeRepeatedInterval, resumeRepeated)
# MotifDiscoveryAnalys
#
# resumeMotifDisc <-
resumeHighestGrowth <- AggResumeGrowth(vectorSentenceHighestGrowth, vectorSentenceHighestDecay)
resumeResult <- paste(resumeIntro, resumeTrend, resumeRepeated, resumeHighestGrowth)
MDinterpreterResult <- MotifDiscoveryInterpreter(datasetWithoutDate, datasetIntervalValue)
MDdocPlanResult <- MotifDiscoveryDocPlan(MDinterpreterResult)
MotifDiscoveryMicroPlan(MDdocPlanResult, MDinterpreterResult)
#
currentIntro <- ReadCurrentIntro(dataset[nrow(dataset),"DateTime"])
currentDesc <- CurrentDesc(interpreterNow, vectorTrendDescriptionAnalysis, datasetWithoutDate)
currentResult <- paste(currentIntro, currentDesc)
# PREDICT LEXICAL PROCESS
i <- 1
vectorTrendDescriptionPredict <- c()
for(i in i:length(datasetWithoutDate)){
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
predictIndex <- interpreterPredict$InterpreterIndex[i]
vectorSequenceIndex <- c(lastIndex, nowIndex, predictIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionPredict[i] <- LD_Compare(vectorSequenceIndex)
}
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
predictIntro <- ReadPredictIntro(ReadIntro(type="Predict"))
specialCorpus <- IsSpecialCorpusAvailable(interpreterPredict, columnName)
if(!is.null(specialCorpus$Sentence)){
predictIntro <- paste(predictIntro, specialCorpus$Sentence)
}
predictContent <- PredictDesc(interpreterPredict,vectorTrendDescriptionPredict,datasetWithoutDate)
predictResult <- paste(predictIntro, predictContent)
resumeResult <- PostProcessing(resumeResult)
currentResult <- PostProcessing(currentResult)
predictResult <- PostProcessing(predictResult)
resumeResult
currentResult
predictResult
head(dataset[["DateTime"])
dataset[["DateTime"]
]
LexicalDateRange(dataset[["DateTime"]][1], dataset[["DateTime"]][2])
dataset[["DateTime"]][1]
# setwd("~/Programming/GitHub/D2T_Apps")
setwd("~/GitHub/D2T_Apps")
# INITIALIZING
source("D2T_Machine.R", local = TRUE)
# READ DATA
# dataset <- as.data.frame(fread(file="Datasets/dummy1.csv"))
# dataset <- as.data.frame(fread(file="Datasets/experiment2.csv"))
dataset <- as.data.frame(fread(file="Datasets/exc_2001_2.csv"))
dataset <- as.data.frame(fread(file="DatasetsExperiment/NilaiTukar#1.csv"))
colnames(dataset)[1] <- "DateTime"
#
datasetWithoutDate <- dataset[ , colnames(dataset) != "DateTime"]
#
columnName <- colnames(datasetWithoutDate)
#
mainConfig <- ReadConfig()
# airQualityDataset <- read.table(file="Datasets/AQ_2016_2017.csv", sep=",", header=TRUE)
datasetIntervalValue <- DateInterval(dataset[2,"DateTime"], dataset[1,"DateTime"])
# Predict
datasetPredicted <- PredictDataset(dataset)
# SYGNAL ANALYSIS
# row [N] data, now
datasetNow <- dataset[nrow(dataset), !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
datasetLast <- dataset[nrow(dataset)-1, !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
dataset2Last <- dataset[nrow(dataset)-2, !colnames(dataset) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(dataset[, !colnames(dataset) == "DateTime"]))
# Statistical Resume
statisticalResume <- StatisticalAnalysis(dataset)
i <- 1
vectorTrendAnalysisResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
vectorTrendAnalysisResult[i] <- TrendAnalysis(1, vectorColumn)
}
#merging main analysis DF with trend column
statisticalResume$Trend <- vectorTrendAnalysisResult
#Repeated value analysis
i <- 1
listRepeatedAnalysisResult <- list()
vectorRepValueResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
listRepeatedAnalysisResult[[i]] <- ResumeRepeatedAnalysis(vectorColumn)
vectorRepValueResult[i] <- listRepeatedAnalysisResult[[i]]$RepValue
}
#highsest growth analysis
i <- 1
vectorHighestGrowthAnalysisResult <- c()
vectorInterpreterRes <- list()
vectorInterpreterIndex <- c()
vectorStartIndex <- c()
vectorEndIndex <- c()
vectorGrowth <- c()
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Growth")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestGrowth <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
dfHighestGrowth$type <- mainConfig$Type
highestInterpreterIndex <- max(vectorInterpreterIndex)
dfHighestGrowth <- dfHighestGrowth[dfHighestGrowth$vectorInterpreterIndex == 5 ,]
dfHighestGrowth <- dfHighestGrowth[dfHighestGrowth$type == "numeric" ,]
dfHighestGrowth$colName <- columnName[as.numeric(rownames(dfHighestGrowth))]
vectorSentenceHighestGrowth <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestGrowth, type = "Growth")
#highsest Decay analysis
i <- 1
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Decay")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestDecay <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
dfHighestDecay$type <- mainConfig$Type
highestInterpreterIndex <- min(vectorInterpreterIndex)
dfHighestDecay <- dfHighestDecay[dfHighestDecay$vectorInterpreterIndex == 1,]
dfHighestDecay <- dfHighestDecay[dfHighestDecay$type == "numeric" ,]
dfHighestDecay$colName <- columnName[as.numeric(rownames(dfHighestDecay))]
vectorSentenceHighestDecay <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestDecay, type = "Decay")
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreter2Last <- DataInterpreter(dataset2Last, statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
interpreterPredict <- DataInterpreter(datasetPredicted,statisticalResume)
# RESUME LEXICAL PROCESS
i <- 1
vectorTrendDescriptionAnalysis <- c()
for(i in i:length(datasetWithoutDate)){
last2Index <- interpreter2Last$InterpreterIndex[i]
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
vectorSequenceIndex <- c(last2Index, lastIndex, nowIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
i <- 1
maxValue <- 0
maxIndex <- 0
for(i in i:length(listRepeatedAnalysisResult)){
if(listRepeatedAnalysisResult[[i]]$RepValue > maxValue){
maxValue <- listRepeatedAnalysisResult[[i]]$RepValue
maxIndex <- i
}
}
if(maxValue != 0){
i <- 1
vectorRepeatedInterpretResult <- c()
selectedColumn <- columnName[maxIndex]
for(i in i:length(listRepeatedAnalysisResult[[maxIndex]]$Start)){
selectedIndex <-listRepeatedAnalysisResult[[maxIndex]]$Start[i]
selectedValue <- datasetWithoutDate[[selectedColumn]][selectedIndex]
# print(selectedValue)
vectorRepeatedInterpretResult[[i]] <- DataInterpreterAdjective(selectedValue, selectedColumn, statisticalResume)$InterpreterResult
}
}
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste0(trendIntro," ",ResumeTrend(statisticalResume))
resumeRepeatedLimit <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
resumeRepeatedInterval <- paste0(DataInterpreterInterval(datasetIntervalValue, type = "default"), "s")
if(maxValue != 0){
resumeRepeated <- ResumeRepeated2(columnName[[maxIndex]], dataset, vectorRepeatedInterpretResult, listRepeatedAnalysisResult[[maxIndex]]$Start, listRepeatedAnalysisResult[[maxIndex]]$End)
resumeRepeated <- paste("There were some repeating value more than @limit @interval: ", resumeRepeated)
}else{
resumeRepeated <- "There were no repeating values within @limit @interval or more, every value changed from time to time."
}
resumeRepeated <- gsub("@limit", resumeRepeatedLimit, resumeRepeated)
resumeRepeated <- gsub("@interval", resumeRepeatedInterval, resumeRepeated)
# MotifDiscoveryAnalys
#
# resumeMotifDisc <-
resumeHighestGrowth <- AggResumeGrowth(vectorSentenceHighestGrowth, vectorSentenceHighestDecay)
resumeResult <- paste(resumeIntro, resumeTrend, resumeRepeated, resumeHighestGrowth)
MDinterpreterResult <- MotifDiscoveryInterpreter(datasetWithoutDate, datasetIntervalValue)
MDdocPlanResult <- MotifDiscoveryDocPlan(MDinterpreterResult)
MotifDiscoveryMicroPlan(MDdocPlanResult, MDinterpreterResult)
#
currentIntro <- ReadCurrentIntro(dataset[nrow(dataset),"DateTime"])
currentDesc <- CurrentDesc(interpreterNow, vectorTrendDescriptionAnalysis, datasetWithoutDate)
currentResult <- paste(currentIntro, currentDesc)
# PREDICT LEXICAL PROCESS
i <- 1
vectorTrendDescriptionPredict <- c()
for(i in i:length(datasetWithoutDate)){
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
predictIndex <- interpreterPredict$InterpreterIndex[i]
vectorSequenceIndex <- c(lastIndex, nowIndex, predictIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionPredict[i] <- LD_Compare(vectorSequenceIndex)
}
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
predictIntro <- ReadPredictIntro(ReadIntro(type="Predict"))
specialCorpus <- IsSpecialCorpusAvailable(interpreterPredict, columnName)
if(!is.null(specialCorpus$Sentence)){
predictIntro <- paste(predictIntro, specialCorpus$Sentence)
}
predictContent <- PredictDesc(interpreterPredict,vectorTrendDescriptionPredict,datasetWithoutDate)
predictResult <- paste(predictIntro, predictContent)
resumeResult <- PostProcessing(resumeResult)
currentResult <- PostProcessing(currentResult)
predictResult <- PostProcessing(predictResult)
resumeResult
currentResult
predictResult
dataset[,1"DateTime"]
dataset[1,"DateTime"]
# setwd("~/Programming/GitHub/D2T_Apps")
setwd("~/GitHub/D2T_Apps")
# INITIALIZING
source("D2T_Machine.R", local = TRUE)
# READ DATA
# dataset <- as.data.frame(fread(file="Datasets/dummy1.csv"))
# dataset <- as.data.frame(fread(file="Datasets/experiment2.csv"))
# dataset <- as.data.frame(fread(file="Datasets/exc_2001_2.csv"))
dataset <- as.data.frame(fread(file="DatasetsExperiment/NilaiTukar#1.csv"))
colnames(dataset)[1] <- "DateTime"
#
datasetWithoutDate <- dataset[ , colnames(dataset) != "DateTime"]
#
columnName <- colnames(datasetWithoutDate)
#
mainConfig <- ReadConfig()
# airQualityDataset <- read.table(file="Datasets/AQ_2016_2017.csv", sep=",", header=TRUE)
datasetIntervalValue <- DateInterval(dataset[2,"DateTime"], dataset[1,"DateTime"])
# Predict
datasetPredicted <- PredictDataset(dataset)
# SYGNAL ANALYSIS
# row [N] data, now
datasetNow <- dataset[nrow(dataset), !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
datasetLast <- dataset[nrow(dataset)-1, !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
dataset2Last <- dataset[nrow(dataset)-2, !colnames(dataset) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(dataset[, !colnames(dataset) == "DateTime"]))
# Statistical Resume
statisticalResume <- StatisticalAnalysis(dataset)
i <- 1
vectorTrendAnalysisResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
vectorTrendAnalysisResult[i] <- TrendAnalysis(1, vectorColumn)
}
#merging main analysis DF with trend column
statisticalResume$Trend <- vectorTrendAnalysisResult
#Repeated value analysis
i <- 1
listRepeatedAnalysisResult <- list()
vectorRepValueResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
listRepeatedAnalysisResult[[i]] <- ResumeRepeatedAnalysis(vectorColumn)
vectorRepValueResult[i] <- listRepeatedAnalysisResult[[i]]$RepValue
}
#highsest growth analysis
i <- 1
vectorHighestGrowthAnalysisResult <- c()
vectorInterpreterRes <- list()
vectorInterpreterIndex <- c()
vectorStartIndex <- c()
vectorEndIndex <- c()
vectorGrowth <- c()
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Growth")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestGrowth <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
dfHighestGrowth$type <- mainConfig$Type
highestInterpreterIndex <- max(vectorInterpreterIndex)
dfHighestGrowth <- dfHighestGrowth[dfHighestGrowth$vectorInterpreterIndex == 5 ,]
dfHighestGrowth <- dfHighestGrowth[dfHighestGrowth$type == "numeric" ,]
dfHighestGrowth$colName <- columnName[as.numeric(rownames(dfHighestGrowth))]
vectorSentenceHighestGrowth <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestGrowth, type = "Growth")
#highsest Decay analysis
i <- 1
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Decay")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestDecay <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
dfHighestDecay$type <- mainConfig$Type
highestInterpreterIndex <- min(vectorInterpreterIndex)
dfHighestDecay <- dfHighestDecay[dfHighestDecay$vectorInterpreterIndex == 1,]
dfHighestDecay <- dfHighestDecay[dfHighestDecay$type == "numeric" ,]
dfHighestDecay$colName <- columnName[as.numeric(rownames(dfHighestDecay))]
vectorSentenceHighestDecay <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestDecay, type = "Decay")
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreter2Last <- DataInterpreter(dataset2Last, statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
interpreterPredict <- DataInterpreter(datasetPredicted,statisticalResume)
# RESUME LEXICAL PROCESS
i <- 1
vectorTrendDescriptionAnalysis <- c()
for(i in i:length(datasetWithoutDate)){
last2Index <- interpreter2Last$InterpreterIndex[i]
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
vectorSequenceIndex <- c(last2Index, lastIndex, nowIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
i <- 1
maxValue <- 0
maxIndex <- 0
for(i in i:length(listRepeatedAnalysisResult)){
if(listRepeatedAnalysisResult[[i]]$RepValue > maxValue){
maxValue <- listRepeatedAnalysisResult[[i]]$RepValue
maxIndex <- i
}
}
if(maxValue != 0){
i <- 1
vectorRepeatedInterpretResult <- c()
selectedColumn <- columnName[maxIndex]
for(i in i:length(listRepeatedAnalysisResult[[maxIndex]]$Start)){
selectedIndex <-listRepeatedAnalysisResult[[maxIndex]]$Start[i]
selectedValue <- datasetWithoutDate[[selectedColumn]][selectedIndex]
# print(selectedValue)
vectorRepeatedInterpretResult[[i]] <- DataInterpreterAdjective(selectedValue, selectedColumn, statisticalResume)$InterpreterResult
}
}
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste0(trendIntro," ",ResumeTrend(statisticalResume))
resumeRepeatedLimit <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
resumeRepeatedInterval <- paste0(DataInterpreterInterval(datasetIntervalValue, type = "default"), "s")
if(maxValue != 0){
resumeRepeated <- ResumeRepeated2(columnName[[maxIndex]], dataset, vectorRepeatedInterpretResult, listRepeatedAnalysisResult[[maxIndex]]$Start, listRepeatedAnalysisResult[[maxIndex]]$End)
resumeRepeated <- paste("There were some repeating value more than @limit @interval: ", resumeRepeated)
}else{
resumeRepeated <- "There were no repeating values within @limit @interval or more, every value changed from time to time."
}
resumeRepeated <- gsub("@limit", resumeRepeatedLimit, resumeRepeated)
resumeRepeated <- gsub("@interval", resumeRepeatedInterval, resumeRepeated)
# MotifDiscoveryAnalys
#
# resumeMotifDisc <-
resumeHighestGrowth <- AggResumeGrowth(vectorSentenceHighestGrowth, vectorSentenceHighestDecay)
resumeResult <- paste(resumeIntro, resumeTrend, resumeRepeated, resumeHighestGrowth)
MDinterpreterResult <- MotifDiscoveryInterpreter(datasetWithoutDate, datasetIntervalValue)
MDdocPlanResult <- MotifDiscoveryDocPlan(MDinterpreterResult)
MotifDiscoveryMicroPlan(MDdocPlanResult, MDinterpreterResult)
#
currentIntro <- ReadCurrentIntro(dataset[nrow(dataset),"DateTime"])
currentDesc <- CurrentDesc(interpreterNow, vectorTrendDescriptionAnalysis, datasetWithoutDate)
currentResult <- paste(currentIntro, currentDesc)
# PREDICT LEXICAL PROCESS
i <- 1
vectorTrendDescriptionPredict <- c()
for(i in i:length(datasetWithoutDate)){
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
predictIndex <- interpreterPredict$InterpreterIndex[i]
vectorSequenceIndex <- c(lastIndex, nowIndex, predictIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionPredict[i] <- LD_Compare(vectorSequenceIndex)
}
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
predictIntro <- ReadPredictIntro(ReadIntro(type="Predict"))
specialCorpus <- IsSpecialCorpusAvailable(interpreterPredict, columnName)
if(!is.null(specialCorpus$Sentence)){
predictIntro <- paste(predictIntro, specialCorpus$Sentence)
}
predictContent <- PredictDesc(interpreterPredict,vectorTrendDescriptionPredict,datasetWithoutDate)
predictResult <- paste(predictIntro, predictContent)
resumeResult <- PostProcessing(resumeResult)
currentResult <- PostProcessing(currentResult)
predictResult <- PostProcessing(predictResult)
resumeResult
currentResult
predictResult
