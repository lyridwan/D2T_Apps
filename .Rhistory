nowIndex <- interpreterNow$InterpreterIndex[i]
vectorSequenceIndex <- c(last2Index, lastIndex, nowIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
i <- 1
maxValue <- 0
maxIndex <- 0
for(i in i:length(listRepeatedAnalysisResult)){
if(listRepeatedAnalysisResult[[i]]$RepValue > maxValue){
maxValue <- listRepeatedAnalysisResult[[i]]$RepValue
maxIndex <- i
}
}
if(maxValue != 0){
i <- 1
vectorRepeatedInterpretResult <- c()
selectedColumn <- columnName[maxIndex]
for(i in i:length(listRepeatedAnalysisResult[[maxIndex]]$Start)){
selectedIndex <-listRepeatedAnalysisResult[[maxIndex]]$Start[i]
selectedValue <- datasetWithoutDate[[selectedColumn]][selectedIndex]
# print(selectedValue)
vectorRepeatedInterpretResult[[i]] <- DataInterpreterAdjective(selectedValue, selectedColumn, statisticalResume)$InterpreterResult
}
}
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste0(trendIntro," ",ResumeTrend(statisticalResume))
resumeRepeatedLimit <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
resumeRepeatedInterval <- paste0(DataInterpreterInterval(datasetIntervalValue, type = "default"), "s")
if(maxValue != 0){
resumeRepeated <- ResumeRepeated2(columnName[[maxIndex]], dataset, vectorRepeatedInterpretResult, listRepeatedAnalysisResult[[maxIndex]]$Start, listRepeatedAnalysisResult[[maxIndex]]$End)
resumeRepeated <- paste("There were some repeating value more than @limit @interval: ", resumeRepeated)
}else{
resumeRepeated <- "There were no repeating values within @limit @interval or more, every value changed from time to time."
}
resumeRepeated <- gsub("@limit", resumeRepeatedLimit, resumeRepeated)
resumeRepeated <- gsub("@interval", resumeRepeatedInterval, resumeRepeated)
# MotifDiscoveryAnalys
#
# resumeMotifDisc <-
resumeHighestGrowth <- AggResumeGrowth(vectorSentenceHighestGrowth, vectorSentenceHighestDecay)
resumeResult <- paste(resumeIntro, resumeTrend, resumeRepeated, resumeHighestGrowth)
MDinterpreterResult <- MotifDiscoveryInterpreter(datasetWithoutDate, datasetIntervalValue)
MDdocPlanResult <- MotifDiscoveryDocPlan(MDinterpreterResult)
#
currentIntro <- ReadCurrentIntro(dataset[nrow(dataset),"DateTime"])
currentDesc <- CurrentDesc(interpreterNow, vectorTrendDescriptionAnalysis, datasetWithoutDate)
currentResult <- paste(currentIntro, currentDesc)
# PREDICT LEXICAL PROCESS
i <- 1
vectorTrendDescriptionPredict <- c()
for(i in i:length(datasetWithoutDate)){
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
predictIndex <- interpreterPredict$InterpreterIndex[i]
vectorSequenceIndex <- c(lastIndex, nowIndex, predictIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionPredict[i] <- LD_Compare(vectorSequenceIndex)
}
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
predictIntro <- ReadPredictIntro(ReadIntro(type="Predict"))
specialCorpus <- IsSpecialCorpusAvailable(interpreterPredict, columnName)
if(!is.null(specialCorpus$Sentence)){
predictIntro <- paste(predictIntro, specialCorpus$Sentence)
}
predictContent <- PredictDesc(interpreterPredict,vectorTrendDescriptionPredict,datasetWithoutDate)
predictResult <- paste(predictIntro, predictContent)
resumeResult <- PostProcessing(resumeResult)
currentResult <- PostProcessing(currentResult)
predictResult <- PostProcessing(predictResult)
resumeResult
currentResult
predictResult
head(dataset)
# setwd("~/Programming/GitHub/D2T_Apps")
setwd("~/GitHub/D2T_Apps")
# INITIALIZING
source("D2T_Machine.R", local = TRUE)
# READ DATA
dataset <- as.data.frame(fread(file="Datasets/exc_2001.csv"))
dataset <- as.data.frame(fread(file="Datasets/experiment.csv"))
dataset <- as.data.frame(fread(file="Datasets/dummy1.csv"))
colnames(dataset)[1] <- "DateTime"
#
datasetWithoutDate <- dataset[ , colnames(dataset) != "DateTime"]
#
columnName <- colnames(datasetWithoutDate)
#
mainConfig <- ReadConfig()
# airQualityDataset <- read.table(file="Datasets/AQ_2016_2017.csv", sep=",", header=TRUE)
datasetIntervalValue <- DateInterval(dataset[2,"DateTime"], dataset[1,"DateTime"])
# Predict
datasetPredicted <- PredictDataset(dataset)
# SYGNAL ANALYSIS
# row [N] data, now
datasetNow <- dataset[nrow(dataset), !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
datasetLast <- dataset[nrow(dataset)-1, !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
dataset2Last <- dataset[nrow(dataset)-2, !colnames(dataset) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(dataset[, !colnames(dataset) == "DateTime"]))
# Statistical Resume
statisticalResume <- StatisticalAnalysis(dataset)
i <- 1
vectorTrendAnalysisResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
vectorTrendAnalysisResult[i] <- TrendAnalysis(1, vectorColumn)
}
#merging main analysis DF with trend column
statisticalResume$Trend <- vectorTrendAnalysisResult
#Repeated value analysis
i <- 1
listRepeatedAnalysisResult <- list()
vectorRepValueResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
listRepeatedAnalysisResult[[i]] <- ResumeRepeatedAnalysis(vectorColumn)
vectorRepValueResult[i] <- listRepeatedAnalysisResult[[i]]$RepValue
}
#highsest growth analysis
i <- 1
vectorHighestGrowthAnalysisResult <- c()
vectorInterpreterRes <- list()
vectorInterpreterIndex <- c()
vectorStartIndex <- c()
vectorEndIndex <- c()
vectorGrowth <- c()
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Growth")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestGrowth <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
dfHighestGrowth$type <- mainConfig$Type
highestInterpreterIndex <- max(vectorInterpreterIndex)
dfHighestGrowth <- dfHighestGrowth[dfHighestGrowth$vectorInterpreterIndex == 5 ,]
dfHighestGrowth <- dfHighestGrowth[dfHighestGrowth$type == "numeric" ,]
dfHighestGrowth$colName <- columnName[as.numeric(rownames(dfHighestGrowth))]
vectorSentenceHighestGrowth <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestGrowth, type = "Growth")
#highsest Decay analysis
i <- 1
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Decay")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestDecay <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
dfHighestDecay$type <- mainConfig$Type
highestInterpreterIndex <- min(vectorInterpreterIndex)
dfHighestDecay <- dfHighestDecay[dfHighestDecay$vectorInterpreterIndex == 1,]
dfHighestDecay <- dfHighestDecay[dfHighestDecay$type == "numeric" ,]
dfHighestDecay$colName <- columnName[as.numeric(rownames(dfHighestDecay))]
vectorSentenceHighestDecay <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestDecay, type = "Decay")
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreter2Last <- DataInterpreter(dataset2Last, statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
interpreterPredict <- DataInterpreter(datasetPredicted,statisticalResume)
# RESUME LEXICAL PROCESS
i <- 1
vectorTrendDescriptionAnalysis <- c()
for(i in i:length(datasetWithoutDate)){
last2Index <- interpreter2Last$InterpreterIndex[i]
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
vectorSequenceIndex <- c(last2Index, lastIndex, nowIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
i <- 1
maxValue <- 0
maxIndex <- 0
for(i in i:length(listRepeatedAnalysisResult)){
if(listRepeatedAnalysisResult[[i]]$RepValue > maxValue){
maxValue <- listRepeatedAnalysisResult[[i]]$RepValue
maxIndex <- i
}
}
if(maxValue != 0){
i <- 1
vectorRepeatedInterpretResult <- c()
selectedColumn <- columnName[maxIndex]
for(i in i:length(listRepeatedAnalysisResult[[maxIndex]]$Start)){
selectedIndex <-listRepeatedAnalysisResult[[maxIndex]]$Start[i]
selectedValue <- datasetWithoutDate[[selectedColumn]][selectedIndex]
# print(selectedValue)
vectorRepeatedInterpretResult[[i]] <- DataInterpreterAdjective(selectedValue, selectedColumn, statisticalResume)$InterpreterResult
}
}
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste0(trendIntro," ",ResumeTrend(statisticalResume))
resumeRepeatedLimit <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
resumeRepeatedInterval <- paste0(DataInterpreterInterval(datasetIntervalValue, type = "default"), "s")
if(maxValue != 0){
resumeRepeated <- ResumeRepeated2(columnName[[maxIndex]], dataset, vectorRepeatedInterpretResult, listRepeatedAnalysisResult[[maxIndex]]$Start, listRepeatedAnalysisResult[[maxIndex]]$End)
resumeRepeated <- paste("There were some repeating value more than @limit @interval: ", resumeRepeated)
}else{
resumeRepeated <- "There were no repeating values within @limit @interval or more, every value changed from time to time."
}
resumeRepeated <- gsub("@limit", resumeRepeatedLimit, resumeRepeated)
resumeRepeated <- gsub("@interval", resumeRepeatedInterval, resumeRepeated)
# MotifDiscoveryAnalys
#
# resumeMotifDisc <-
resumeHighestGrowth <- AggResumeGrowth(vectorSentenceHighestGrowth, vectorSentenceHighestDecay)
resumeResult <- paste(resumeIntro, resumeTrend, resumeRepeated, resumeHighestGrowth)
MDinterpreterResult <- MotifDiscoveryInterpreter(datasetWithoutDate, datasetIntervalValue)
MDdocPlanResult <- MotifDiscoveryDocPlan(MDinterpreterResult)
#
currentIntro <- ReadCurrentIntro(dataset[nrow(dataset),"DateTime"])
currentDesc <- CurrentDesc(interpreterNow, vectorTrendDescriptionAnalysis, datasetWithoutDate)
currentResult <- paste(currentIntro, currentDesc)
# PREDICT LEXICAL PROCESS
i <- 1
vectorTrendDescriptionPredict <- c()
for(i in i:length(datasetWithoutDate)){
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
predictIndex <- interpreterPredict$InterpreterIndex[i]
vectorSequenceIndex <- c(lastIndex, nowIndex, predictIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionPredict[i] <- LD_Compare(vectorSequenceIndex)
}
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
predictIntro <- ReadPredictIntro(ReadIntro(type="Predict"))
specialCorpus <- IsSpecialCorpusAvailable(interpreterPredict, columnName)
if(!is.null(specialCorpus$Sentence)){
predictIntro <- paste(predictIntro, specialCorpus$Sentence)
}
predictContent <- PredictDesc(interpreterPredict,vectorTrendDescriptionPredict,datasetWithoutDate)
predictResult <- paste(predictIntro, predictContent)
resumeResult <- PostProcessing(resumeResult)
currentResult <- PostProcessing(currentResult)
predictResult <- PostProcessing(predictResult)
resumeResult
currentResult
predictResult
MDinterpreterResult
MDdocPlanResult
mainConfig
MotifDiscoveryAnalysis("Sale", dataset[["Sale"]], datasetIntervalValue)
source('~/GitHub/D2T_Apps/D2T_Machine.R')
MotifDiscoveryAnalysis <- function(colName, dataset, datasetIntervalValue){
n <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
index <- length(dataset) - n
#pattern
pattern <- dataset[index:length(dataset)]
#dataest
dataset <- dataset[1:index]
print(pattern)
print(dataset)
# print(length(pattern))
result <- list()
if(!is.null(KMP(dataset, pattern))){
result$total <- length(KMP(dataset,pattern))
result$pattern <- KMP(dataset,pattern)
}else{
result$total <- 0
result$pattern <- NA
}
return(result)
}
MotifDiscoveryAnalysis("Sale", dataset[["Sale"]], datasetIntervalValue)
n <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
n
nrow(dataset)
dataset[["Sale"]]
MotifDiscoveryAnalysis <- function(colName, dataset, datasetIntervalValue){
n <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
index <- length(dataset) - n
#pattern
pattern <- dataset[index:length(dataset)]
#dataest
dataset <- dataset[1:index]
print(dataset)
print(pattern)
# print(length(pattern))
result <- list()
if(!is.null(KMP(dataset, pattern))){
result$total <- length(KMP(dataset,pattern))
result$pattern <- KMP(dataset,pattern)
}else{
result$total <- 0
result$pattern <- NA
}
return(result)
}
MotifDiscoveryAnalysis("Sale", dataset[["Sale"]], datasetIntervalValue)
dataset[["Sale"]]
MotifDiscoveryAnalysis <- function(colName, dataset, datasetIntervalValue){
n <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
index <- length(dataset)-1 - n
#pattern
pattern <- dataset[index:length(dataset)]
#dataest
dataset <- dataset[1:index]
print(dataset)
print(pattern)
# print(length(pattern))
result <- list()
if(!is.null(KMP(dataset, pattern))){
result$total <- length(KMP(dataset,pattern))
result$pattern <- KMP(dataset,pattern)
}else{
result$total <- 0
result$pattern <- NA
}
return(result)
}
MotifDiscoveryAnalysis("Sale", dataset[["Sale"]], datasetIntervalValue)
MotifDiscoveryAnalysis <- function(colName, dataset, datasetIntervalValue){
print(dataset)
n <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
index <- length(dataset)-1 - n
#pattern
pattern <- dataset[index:length(dataset)]
#dataest
dataset <- dataset[1:index]
print(dataset)
print(pattern)
# print(length(pattern))
result <- list()
if(!is.null(KMP(dataset, pattern))){
result$total <- length(KMP(dataset,pattern))
result$pattern <- KMP(dataset,pattern)
}else{
result$total <- 0
result$pattern <- NA
}
return(result)
}
MotifDiscoveryAnalysis("Sale", dataset[["Sale"]], datasetIntervalValue)
MotifDiscoveryAnalysis <- function(colName, dataset, datasetIntervalValue){
print(dataset)
n <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
index <- length(dataset)+1 - n
#pattern
pattern <- dataset[index:length(dataset)]
#dataest
dataset <- dataset[1:index]
print(dataset)
print(pattern)
# print(length(pattern))
result <- list()
if(!is.null(KMP(dataset, pattern))){
result$total <- length(KMP(dataset,pattern))
result$pattern <- KMP(dataset,pattern)
}else{
result$total <- 0
result$pattern <- NA
}
return(result)
}
MotifDiscoveryAnalysis("Sale", dataset[["Sale"]], datasetIntervalValue)
MDinterpreterResult <- MotifDiscoveryInterpreter(datasetWithoutDate, datasetIntervalValue)
MDinterpreterResult
MDdocPlanResult <- MotifDiscoveryDocPlan(MDinterpreterResult)
MDdocPlanResult
MotifDiscoveryMicroPlan(MDdocPlanResult, MDinterpreterResult)
MDdocPlanResult[5] <- NA
MotifDiscoveryMicroPlan(MDdocPlanResult, MDinterpreterResult)
MotifDiscoveryMicroPlan(MDdocPlanResult, MDinterpreterResult)
MDdocPlanResult
sum(!is.na(MDdocPlanResult)
)
MotifDiscoveryMicroPlan <- function(listColumn, listMD){
# > listColumn
# [1] "6" NA  NA  NA  NA
# > listMD
# [[6]]
# [[6]]$`total`
# [1] 9
#
# [[6]]$pattern
# [1] 10 11 12 13 14 15 16 17 18
#
#
# [[7]]
# [[7]]$`total`
# [1] 0
#
# [[7]]$pattern
# [1] NA
limit <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
interval <- paste0(DataInterpreterInterval(datasetIntervalValue, type = "default"), "s")
#If there's no pattern match
MDcontent <- ""
if(sum(!is.na(listColumn)) == 0){
verb <- MotifDiscoveryRE()
MDintro <- paste0("For the past ", limit, " ", interval, " ,")
MDcontent <- paste("no", verb, "patterns were found for each categorical/integer parameters.")
MDsentence <- paste(MDintro, MDcontent)
return(MDsentence)
#Aggregation
}else{
#There are a matching USD data pattern in the last 7 days
#with data patterns from August 22-24 2018 and September 23-25 2018.
#if pattern found only 1 parameter
if(sum(!is.na(listColumn)) == 1){
selectedColindex <- as.numeric(listColumn[which(!is.na(listColumn))])
selectedColname <- columnName[selectedColindex]
verb <- MotifDiscoveryRE()
dateAggregation <- ""
i <- 1
#Iterasi sebanyak pattern yang ada dalam list
for(i in i:length(listMD[[selectedColindex]]$pattern)){
indexMD <- as.numeric(listMD[[selectedColindex]]$pattern[i])
startDate <- dataset[indexMD,"DateTime"]
endDate <- dataset[indexMD + limit,"DateTime"]
dateRange <- LexicalDateRange(startDate,endDate)
#first
if(i == 1){
dateAggregation <- paste0(dateAggregation, dateRange)
#middle
}else if(i == length(listMD[[selectedColindex]]$pattern)){
dateAggregation <- paste0(dateAggregation, ", and ", dateRange, ".")
#lastcondition
}else{
dateAggregation <- paste0(dateAggregation, ", ", dateRange)
}
}
#single pattern found
if(length(listMD[[selectedColindex]]$pattern) == 1){
tobe <- "is"
s <- ""
}else{
tobe <- "are"
s <- "s"
}
#a or an replace
if(verb == "identical"){
a <- "an"
}else{
a <- "a"
}
dateRangedataset <- LexicalDateRange(dataset[nrow(dataset)-limit, "DateTime"], dataset[nrow(dataset), "DateTime"])
MDcontent <- paste("There @tobe @a", verb, selectedColname, "data pattern", "in the last", limit, interval,
"(@dateNow)", "with data pattern@s from", dateAggregation)
MDcontent <- gsub("@tobe", tobe, MDcontent)
MDcontent <- gsub("@s", s, MDcontent)
MDcontent <- gsub("@a", a, MDcontent)
MDcontent <- gsub("@dateNow", dateRangedataset, MDcontent)
return(MDcontent)
}else{
#removing NA value
listColumn2 <- listColumn[which(!is.na(listColumn))]
listColumnName <- columnName[as.numeric(listColumn2)]
MDcontent <- ""
groupColumn <- ""
i<-1
for(i in i:length(listColumnName)){
#INTRO
if(i != length(listColumnName)){
groupColumn <- paste0(groupColumn, listColumnName[i], ", ")
}else{
groupColumn <- paste0(groupColumn, "and ", listColumnName[i])
}
#CONTENT
selectedColindex <- as.numeric(listColumn2[i])
dateAggregation <- ""
j <- 1
#Iterasi sebanyak pattern yang ada dalam list
for(j in j:length(listMD[[selectedColindex]]$pattern)){
indexMD <- as.numeric(listMD[[selectedColindex]]$pattern[j])
startDate <- dataset[indexMD,"DateTime"]
endDate <- dataset[indexMD + limit,"DateTime"]
dateRange <- LexicalDateRange(startDate,endDate)
#first
if(j == 1){
dateAggregation <- paste0(dateAggregation, dateRange)
#middle
}else if(j == length(listMD[[selectedColindex]]$pattern)){
dateAggregation <- paste0(dateAggregation, ", and ", dateRange, ". ")
#lastcondition
}else{
dateAggregation <- paste0(dateAggregation, ", ", dateRange)
}
}
#USD data pattern matches with the data pattern from August 22
MDcontent <- paste0(MDcontent, listColumnName[i], " data pattern matches with their data from ", dateAggregation)
}
#USD and JPY data patterns match with their last 7 days data pattern.
MDintro <- paste(groupColumn, "data patterns match with their last", limit, interval, "data pattern.")
MDsentence <- paste(MDintro, MDcontent)
return(MDsentence)
}
}
}
MotifDiscoveryMicroPlan(MDdocPlanResult, MDinterpreterResult)
