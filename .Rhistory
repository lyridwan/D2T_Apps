#staatus = 0, no calculating
status1 <- isNegative[1]
status2 <- isNegative[1]
tempGrowth <-0
isNegative <- dataset<0
vectorStartIndex[[1]] <- 1
counter <- 1
for(i in i:length(dataset)){
print(dataset[i])
#cat("s1:", status1, " s2:", status2,"\n")
status1 <- status2
status2 <- isNegative[i]
if(i==length(dataset)){
cat("tg", tempGrowth, "\n")
cat("dt", dataset[i], "\n")
# cat("dt", dataset[i-1], "\n")
cat("ct", counter, "\n")
print("last")
}
if(status1 == status2){
print("sama")
if(i==length(dataset)){
tempGrowth <- tempGrowth + dataset[i]
vectorTotalGrowth[[counter]] <- tempGrowth
}else{
tempGrowth <- tempGrowth + dataset[i]
}
vectorEndIndex[[counter]] <- i
}else{
print("beda")
print(tempGrowth)
vectorTotalGrowth[[counter]] <- tempGrowth
counter<- counter+1
vectorStartIndex[[counter]] <- i
vectorEndIndex[[counter]] <- i
if(i==length(dataset)){
tempGrowth <- dataset[i]
vectorTotalGrowth[[counter]] <- tempGrowth
}
tempGrowth <- 0
tempGrowth <- dataset[i]
status2 <- isNegative[i]
#print(counter)
}
#print(dataset[i])
}
print(counter)
print(dataset)
cat("\n")
print(vectorTotalGrowth)
print(vectorStartIndex)
print(vectorEndIndex)
#return(listResult)
}
fx(asd)
fx(asd3)
asd3[3] <- 1
fx(asd3)
ResumeHighestGrowthAnalysis <- function(dataset){
#diff function: next index value - now value
#example:
#> vectorColumn
#[1] 10 10 10 10 10 15 13 14 12 13 14 10 12 14 15 15 11 14 15 10 14 12 15 15 12 11 15 10 14 10 15 14
#> diff(vectorColumn)
#[1]  0  0  0  0  5 -2  1 -2  1  1 -4  2  2  1  0 -4  3  1 -5  4 -2  3  0 -3 -1  4 -5  4 -4  5 -1
i<-1
vectorTotalGrowth <- c()
vectorStartIndex <- c()
vectorEndIndex <- c()
#staatus = 0, no calculating
status1 <- isNegative[1]
status2 <- isNegative[1]
tempGrowth <-0
isNegative <- dataset<0
vectorStartIndex[[1]] <- 1
counter <- 1
for(i in i:length(dataset)){
print(dataset[i])
#cat("s1:", status1, " s2:", status2,"\n")
status1 <- status2
status2 <- isNegative[i]
if(status1 == status2){
# print("sama")
if(i==length(dataset)){
tempGrowth <- tempGrowth + dataset[i]
vectorTotalGrowth[[counter]] <- tempGrowth
}else{
tempGrowth <- tempGrowth + dataset[i]
}
vectorEndIndex[[counter]] <- i
}else{
# print("beda")
# print(tempGrowth)
vectorTotalGrowth[[counter]] <- tempGrowth
counter<- counter+1
vectorStartIndex[[counter]] <- i
vectorEndIndex[[counter]] <- i
if(i==length(dataset)){
tempGrowth <- dataset[i]
vectorTotalGrowth[[counter]] <- tempGrowth
}
tempGrowth <- 0
tempGrowth <- dataset[i]
status2 <- isNegative[i]
#print(counter)
}
#print(dataset[i])
}
# print(counter)
print(dataset)
# cat("\n")
print(vectorTotalGrowth)
print(vectorStartIndex)
print(vectorEndIndex)
#return(listResult)
}
ResumeHighestGrowthAnalysis
ResumeHighestGrowthAnalysis(asd3)
ResumeHighestGrowthAnalysis <- function(dataset){
#diff function: next index value - now value
#example:
#> vectorColumn
#[1] 10 10 10 10 10 15 13 14 12 13 14 10 12 14 15 15 11 14 15 10 14 12 15 15 12 11 15 10 14 10 15 14
#> diff(vectorColumn)
#[1]  0  0  0  0  5 -2  1 -2  1  1 -4  2  2  1  0 -4  3  1 -5  4 -2  3  0 -3 -1  4 -5  4 -4  5 -1
i<-1
vectorTotalGrowth <- c()
vectorStartIndex <- c()
vectorEndIndex <- c()
#staatus = 0, no calculating
status1 <- isNegative[1]
status2 <- isNegative[1]
tempGrowth <-0
isNegative <- dataset<0
vectorStartIndex[[1]] <- 1
counter <- 1
for(i in i:length(dataset)){
#cat("s1:", status1, " s2:", status2,"\n")
status1 <- status2
status2 <- isNegative[i]
if(status1 == status2){
# print("sama")
if(i==length(dataset)){
tempGrowth <- tempGrowth + dataset[i]
vectorTotalGrowth[[counter]] <- tempGrowth
}else{
tempGrowth <- tempGrowth + dataset[i]
}
vectorEndIndex[[counter]] <- i
}else{
# print("beda")
# print(tempGrowth)
vectorTotalGrowth[[counter]] <- tempGrowth
counter<- counter+1
vectorStartIndex[[counter]] <- i
vectorEndIndex[[counter]] <- i
if(i==length(dataset)){
tempGrowth <- dataset[i]
vectorTotalGrowth[[counter]] <- tempGrowth
}
tempGrowth <- 0
tempGrowth <- dataset[i]
status2 <- isNegative[i]
#print(counter)
}
#print(dataset[i])
}
# print(counter)
print(dataset)
# cat("\n")
print(vectorTotalGrowth)
print(vectorStartIndex)
print(vectorEndIndex)
#return(listResult)
}
ResumeHighestGrowthAnalysis(asd3)
asd3 <- dataset[["Probability"]]
asd3
diff(asd3)
asd3<-diff(asd3)
ResumeHighestGrowthAnalysis(asd3)
tempcrp <- TrendFuzzyGenerator("Probability", statisticalResume)
tempcrp
TrendFuzzyGenerator("Probability", statisticalResume)
TrendFuzzyGenerator("Probability", statisticalResume)
TrendFuzzyGenerator <-function(type, statisticalResume){
corpus <- read.table(file=paste0("Corpus/TrendFuzzyAdjective.csv"), sep=",", header=TRUE)
maxRange <- as.character(statisticalResume[statisticalResume$ColName == type, "MaxValue"])
minRange <- as.character(statisticalResume[statisticalResume$ColName == type, "MinValue"])
# corpus <- read.table(file=paste0("Corpus/GeneralAdjective.csv"), sep=",", header=TRUE)
# maxRange <- as.character(statisticalResume[statisticalResume$ColName == "Tahu", "MaxValue"])
# minRange <- as.character(statisticalResume[statisticalResume$ColName == "Tahu", "MinValue"])
listGeneralPartition <- list()
if(minRange == maxRange){
result <- "Constant"
}else{
n = nrow(corpus)
node = (2*n)+n-1
minRange <- as.double(maxRange)/2*-1
maxRange <- as.double(maxRange)/2
cat(">>>> max min", maxRange, minRange)
rangenode = (maxRange-minRange)/node
i=1
j=0
membershipValue <- c()
for (i in i:n) {
if(i == 1){
v1<-minRange;
v2<-minRange;
v3<-minRange+(2*rangenode);
v4<-minRange+(3*rangenode);
# print("````````````````````````````")
# print(j)
j <- i+1
# print(j)
# print(value)
# print(membershipValue[i])
# print(v1)
# print(v2)
# print(v3)
# print(v4)
cat(">>> i:", i, "<<<",v1,v2,v3,v4, "\n")
listGeneralPartition[[i]] <- c(v1,v2,v3,v4)
#listGeneralPartition[[corpus$Category[i]]] <- c(v1,v2,v3,v4)
}else{
v1<-minRange+(j)*rangenode;
v2<-minRange+(j+1)*rangenode;
v3<-minRange+(j+3)*rangenode;
v4<-minRange+(j+4)*rangenode;
cat(">>> i:", i, "<<<",v1,v2,v3,v4, "\n")
listGeneralPartition[[i]] <- c(v1,v2,v3,v4)
#lines(c(v1,v2,v3,v4),as.matrix(c(1,6,6,1)),lwd=1,col="red")
# print("````````````````````````````")
# print(j)
j <- j+3
# print(j)
# print(value)
# print(membershipValue[i])
# print(v1)
# print(v2)
# print(v3)
# print(v4)
}
}
# result <- corpus[2, "Category"]
# result<- paste("Not available for general -aa",which.max(membershipValue))
##corpus <- read.table(file="Corpus/GeneralAdjective.csv", sep=",", header=TRUE)
##result <- MembershipFuzzy(value, corpus);
}
#exception for first and last point
listGeneralPartition[[1]][1] <- as.double(as.character(statisticalResume[statisticalResume$ColName == type,"MaxValue"]))*-1
listGeneralPartition[[length(listGeneralPartition)]][length(listGeneralPartition[[1]])] <- as.double(as.character(statisticalResume[statisticalResume$ColName == type,"MaxValue"]))
v1 <-unlist(lapply(listGeneralPartition, `[[`, 1))
v2 <-unlist(lapply(listGeneralPartition, `[[`, 2))
v3 <-unlist(lapply(listGeneralPartition, `[[`, 3))
v4 <-unlist(lapply(listGeneralPartition, `[[`, 4))
# #PLOTTING AREA
# i<-1
# plotting <- list()
# for(i in i:length(listGeneralPartition)){
#   plotting[[i]] <- listGeneralPartition[[i]]
# }
# PlottingTrendFuzzy(plotting, type)
result <- data.frame(Category=corpus$Category, v1, v2, v3, v4)
return(result)
}
TrendFuzzyGenerator("Probability", statisticalResume)
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
i <- 1;
n <- nrow(corpus);
m <- length(corpus);
membershipValue <- c()
for(i in i:n){
v1<-corpus[i, "v1"];
v2<-corpus[i, "v2"];
v3<-corpus[i, "v3"];
v4<-corpus[i, "v4"];
##/ Â¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membershipValue[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membershipValue[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membershipValue[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membershipValue[i] <- 0;
}
}
#check highest membership result
interpreterResult <- corpus[which.max(membershipValue), "Category"]
interpreterIndex <- which(interpreterResult == corpus$Category)
return (list(interpreterResult = as.character(interpreterResult), interpreterIndex = interpreterIndex))
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
TrendFuzzyGenerator("Probability", statisticalResume)
TrendFuzzyGenerator <-function(type, statisticalResume){
corpus <- read.table(file=paste0("Corpus/TrendFuzzyAdjective.csv"), sep=",", header=TRUE)
maxRange <- as.character(statisticalResume[statisticalResume$ColName == type, "MaxValue"])
minRange <- as.character(statisticalResume[statisticalResume$ColName == type, "MinValue"])
# corpus <- read.table(file=paste0("Corpus/GeneralAdjective.csv"), sep=",", header=TRUE)
# maxRange <- as.character(statisticalResume[statisticalResume$ColName == "Tahu", "MaxValue"])
# minRange <- as.character(statisticalResume[statisticalResume$ColName == "Tahu", "MinValue"])
listGeneralPartition <- list()
if(minRange == maxRange){
result <- "Constant"
}else{
n = nrow(corpus)
node = (2*n)+n-1
minRange <- as.double(maxRange)/2*-1
maxRange <- as.double(maxRange)/2
cat(">>>> max min", maxRange, minRange)
rangenode = (maxRange-minRange)/node
i=1
j=0
membershipValue <- c()
for (i in i:n) {
if(i == 1){
v1<-minRange;
v2<-minRange;
v3<-minRange+(2*rangenode);
v4<-minRange+(3*rangenode);
# print("````````````````````````````")
# print(j)
j <- i+1
# print(j)
# print(value)
# print(membershipValue[i])
# print(v1)
# print(v2)
# print(v3)
# print(v4)
cat(">>> i:", i, "<<<",v1,v2,v3,v4, "\n")
listGeneralPartition[[i]] <- c(v1,v2,v3,v4)
#listGeneralPartition[[corpus$Category[i]]] <- c(v1,v2,v3,v4)
}else{
v1<-minRange+(j)*rangenode;
v2<-minRange+(j+1)*rangenode;
v3<-minRange+(j+3)*rangenode;
v4<-minRange+(j+4)*rangenode;
cat(">>> i:", i, "<<<",v1,v2,v3,v4, "\n")
listGeneralPartition[[i]] <- c(v1,v2,v3,v4)
#lines(c(v1,v2,v3,v4),as.matrix(c(1,6,6,1)),lwd=1,col="red")
# print("````````````````````````````")
# print(j)
j <- j+3
# print(j)
# print(value)
# print(membershipValue[i])
# print(v1)
# print(v2)
# print(v3)
# print(v4)
}
}
# result <- corpus[2, "Category"]
# result<- paste("Not available for general -aa",which.max(membershipValue))
##corpus <- read.table(file="Corpus/GeneralAdjective.csv", sep=",", header=TRUE)
##result <- MembershipFuzzy(value, corpus);
}
#exception for first and last point
listGeneralPartition[[1]][1] <- as.double(as.character(statisticalResume[statisticalResume$ColName == type,"MaxValue"]))*-1
listGeneralPartition[[length(listGeneralPartition)]][length(listGeneralPartition[[1]])] <- as.double(as.character(statisticalResume[statisticalResume$ColName == type,"MaxValue"]))
v1 <-unlist(lapply(listGeneralPartition, `[[`, 1))
v2 <-unlist(lapply(listGeneralPartition, `[[`, 2))
v3 <-unlist(lapply(listGeneralPartition, `[[`, 3))
v4 <-unlist(lapply(listGeneralPartition, `[[`, 4))
#PLOTTING AREA
i<-1
plotting <- list()
for(i in i:length(listGeneralPartition)){
plotting[[i]] <- listGeneralPartition[[i]]
}
PlottingTrendFuzzy(plotting, type)
result <- data.frame(Category=corpus$Category, v1, v2, v3, v4)
return(result)
}
TrendFuzzyGenerator("Probability", statisticalResume)
TrendFuzzyGenerator("Probability", statisticalResume)
tempcrp
tempcrp<-TrendFuzzyGenerator("Probability", statisticalResume)
MembershipFuzzy(0.8712017, tempcrp)
#setwd("~/GitHub/D2T_Apps")
setwd("~/Programming/GitHub/D2T_Apps")
# INITIALIZING
source("D2T_Machine.R", local = TRUE)
# READ DATA
dataset <- read.table(file="Datasets/dummy1.csv", sep=",", header=TRUE)
datasetWithoutDate <- dataset[ , colnames(dataset) != "DateTime"]
# airQualityDataset <- read.table(file="Datasets/AQ_2016_2017.csv", sep=",", header=TRUE)
#
columnName <- colnames(dataset[ , colnames(dataset) != "DateTime"])
# Predict
datasetPredicted <- PredictDataset(dataset)
# SYGNAL ANALYSIS
# row [N] data, now
datasetNow <- dataset[nrow(dataset), !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
datasetLast <- dataset[nrow(dataset)-1, !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
dataset2Last <- dataset[nrow(dataset)-2, !colnames(dataset) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(dataset[, !colnames(dataset) == "DateTime"]))
# Statistical Resume
statisticalResume <- StatisticalAnalysis(dataset)
i <- 1
vectorTrendAnalysisResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
vectorTrendAnalysisResult[i] <- TrendAnalysis(1, vectorColumn)
}
#merging main analysis DF with trend column
statisticalResume$Trend <- vectorTrendAnalysisResult
#Repeated value analysis
i <- 1
listRepeatedAnalysisResult <- list()
vectorRepValueResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
listRepeatedAnalysisResult[[i]] <- ResumeRepeatedAnalysis(vectorColumn)
vectorRepValueResult[i] <- listRepeatedAnalysisResult[[i]]$RepValue
}
#highsest growth analysis
i <- 1
listHighestGrowthAnalysisResult <- list()
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult[[i]] <- ResumeHighestGrowthAnalysis(listColumn)
}
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreter2Last <- DataInterpreter(dataset2Last, statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
# RESUME LEXICAL PROCESS
i <- 1
vectorTrendDescriptionAnalysis <- c()
for(i in i:length(datasetWithoutDate)){
last2Index <- interpreter2Last$InterpreterIndex[i]
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
vectorSequenceIndex <- c(last2Index, lastIndex, nowIndex)
print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
# i=1;
# # Today
# for (i in i:length(columnName)) {
#   cat(" Today", columnName[i], " :", as.character(unlist(interpreterNow[i])), "\n\n")
# }
# i=1;
# # Last
# for (i in i:length(columnName)) {
#   cat(" Last", columnName[i], " :", as.character(unlist(interpreterLast[i])), "\n\n")
# }
# i=1;
# # Resume
# for (i in i:length(columnName)) {
#   cat(" Resume", columnName[i], " :", as.character(unlist(interpreterResume[i])), "\n\n")
# }
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste0(trendIntro," ",ResumeTrend(statisticalResume),".")
#eventIntro <- ReadIntro(type="Event")
#resumeEvent <- paste(eventIntro,"6 value from Xth to Yth")
i <- 1
maxValue <- 0
maxIndex <- 0
for(i in i:length(listRepeatedAnalysisResult)){
if(listRepeatedAnalysisResult[[i]]$RepValue > maxValue){
maxValue <- listRepeatedAnalysisResult[[i]]$RepValue
maxIndex <- i
}
}
i <- 1
vectorRepeatedInterpretResult <- c()
selectedColumn <- columnName[maxIndex]
for(i in i:length(listRepeatedAnalysisResult[[maxIndex]]$Start)){
selectedIndex <-listRepeatedAnalysisResult[[maxIndex]]$Start[i]
selectedValue <- datasetWithoutDate[[selectedColumn]][selectedIndex]
print(selectedValue)
vectorRepeatedInterpretResult[[i]] <- DataInterpreterAdjective(selectedValue, selectedColumn, statisticalResume)$interpreterResult
}
resumeRepeated <- ResumeRepeated2(columnName[[maxIndex]], dataset, vectorRepeatedInterpretResult, listRepeatedAnalysisResult[[maxIndex]]$Start, listRepeatedAnalysisResult[[maxIndex]]$End)
resumeRepeated <- paste("There were some repeated value more than 4 days: ", resumeRepeated)
#
# currentIntro <- ChangeTimeDesc(ReadIntro(type="Current"),dataset["DateTime"])
# currentDesc <- CurrentDesc(interpreterNow, statisticalResume, dataset)
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
# predictIntro <- ReadIntro(type="Predict")
# predictContent <- "Content content content."
# predictConc <- "Conclussion from predict result."
resumeResult <- paste(resumeIntro, resumeTrend, resumeRepeated)
# currentResult <- paste(currentIntro, currentDesc, currentAglast, currentAgresume)
# currentResult <- paste(currentIntro, currentDesc)
# predictResult <- paste(predictIntro, predictContent, predictConc)
# source("D2T_Machine.R", local = TRUE)
resumeResult
# currentResult
# predictResult
