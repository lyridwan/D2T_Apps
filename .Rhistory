msg<-paste(status,aux,verb)
i=1;
for(i in i:j){
if(j==1){
oi <- ordinal_indicator(time_happened[i])
th <- paste(time_happened[i],oi,sep="")
msg<- paste(" ",msg,th,".",sep="")
}
else{
if(i!=j){
oi <- ordinal_indicator(time_happened[i])
th <- paste(time_happened[i],oi,sep="")
msg<- paste(" ",msg,th,", ",sep="")
}
else if(i==j-1){
oi <- ordinal_indicator(time_happened[i])
th <- paste(time_happened[i],oi,sep="")
msg<- paste(msg," ",th,sep="")
}
else{
oi <- ordinal_indicator(time_happened[i])
th <- paste(time_happened[i],oi,sep="")
msg<-paste(msg," and ",th,".",sep="")
}
}
}
if((status=="calm")||(status=="light air")||(status=="light breeze")||
(status=="gentle breeze")||(status=="moderate breeze")||(status=="fresh breeze")){
return("false")
}
else{
return(msg)
}
}
WindExtremeMsg <- WindExtremeMessage_function(LM)
MonthlyAQMessage_function <- function(AQData){
MonthAQ <- AQData[(NROW(AQData)-30):NROW(AQData), ]
monthmean <- colMeans(MonthAQ)
msg<-AirQuality_interpreter(monthmean)
return(msg)
}
MonthlyAQMsg <- MonthlyAQMessage_function(datasetAQ)
# AQExtremeMsg <- AQExtremeMessage_function(datasetAQ)
#--------------------------------------------------------------------------------------------------#
#--------------------------------  Linguistic Realization    ---------------------------------------#
# --> untuk pesan yang dibandingkan
#----------------------------- Microplanning for Prediction ------------------------------------------#
# Lexicalisation proses
# Source = Ramos
# Function
LD_Compare <- function (data, value){
#map data-set to Index-set
i=1; n=length(data); index_data<-matrix();
for(i in i:n){
j=1; m=length(AQ_val)
for(j in j:m){
x<-colnames(value[j])
#cat("x : ",x," data: ",data[i],"\n")
if(data[i]==x){
index_data[i]<-value[j]
}
}
}
#Compute Index Variation
i=1; n=length(data); IV<-c(0,0);
for(i in i:n){
if(i<n){
IV[i]<-((index_data[[i+1]])-(index_data[[i]]))
}else{
IV[i]<-index_data[[i]]
}
}
#Apply Rules
i=1; IVL<-c(0,0)
for(i in i:n){
if(IV[i]>0){
IVL[i]="+"
}else if(IV[i]<0){
IVL[i]="-"
}else{
IVL[i]="0"
}
}
x<-TrendDesc_template(IVL)
return(x)
}
AQ_Intro <- function(){
intro_AQ <- as.matrix(read.table(file="wordbank/AQ_referring_expression.csv", sep=",", header=TRUE))
n=length(intro_AQ); i=1
random_value <- as.integer(runif(1,1,n+1))
return(intro_AQ[random_value])
}
Prediction_Intro <- function(){
intro_PR <- as.matrix(read.table(file="wordbank/PR_referring_expression.csv", sep=",", header=TRUE))
n=length(intro_PR); i=1
random_value <- as.integer(runif(1,1,n+1))
return(intro_PR[random_value])
}
Temperature_Intro <- function(){
intro_Temp <- as.matrix(read.table(file="wordbank/Temp_intro.csv", sep=",", header=TRUE))
n=length(intro_Temp); i=1
random_value <- as.integer(runif(1,1,n+1))
return(intro_Temp[random_value])
}
TrendDesc_template <- function (IVL,data){
if((IVL[1]=="0")&&(IVL[2]=="0")){
TrendDesc <- change_word_bank_AQ("stable")
}
if(((IVL[1]=="+")&&(IVL[2]=="-"))||((IVL[1]=="-")&&(IVL[2]=="+"))){
TrendDesc <- change_word_bank_AQ("mediumChange")
}
if(((IVL[1]=="+")&&(IVL[2]=="0"))||((IVL[1]=="-")&&(IVL[2]=="0"))){
TrendDesc <- change_word_bank_AQ("startChange")
}
if(((IVL[1]=="0")&&(IVL[2]=="+"))||((IVL[1]=="0")&&(IVL[2]=="-"))){
TrendDesc <- change_word_bank_AQ("endChange")
}
if(((IVL[1]=="+")&&(IVL[2]=="+"))||((IVL[1]=="-")&&(IVL[2]=="-"))){
TrendDesc <- change_word_bank_AQ("progressiveChange")
}
return(TrendDesc)
}
change_word_bank_AQ <- function (fragmentCode){
phraseAQ <- read.table(file="wordbank/AQ_phrase_bank.csv", sep=",", header=TRUE)
n=length(phraseAQ); i=1;
for(i in i:n){
m=colnames(phraseAQ[i])
if(fragmentCode==m){
j=runif(1,1,n+1)
return(phraseAQ[j,i])
}
}
}
#Function Sky State Aggregation with Simple Conjunction
Sky_Agg <- function (rain,cloud){
#Assign Rule for Contrast Value for each partition of rain state
if(rain=="no rain"||rain=="light rain"){
Contrast1=0
}
else if(rain=="moderate rain"||rain=="heavy rain" ||
rain=="intense rain" || rain=="torential rain"
){
Contrast1=1
}
#Assign Rule for Contrast Value for each partition of cloud state
if(cloud=="clear"||cloud=="foggy"||cloud=="mostly sunny"){
Contrast2=0
}
else if(cloud=="partly cloudy"||cloud=="mostly cloudy"||cloud=="broken"
|| cloud=="overcast"
){
Contrast2=1
}
if(Contrast1==Contrast2){
Conjunction<-"covered with"
}else{
Conjunction<- "although its covered by"
}
phrase <- paste(rain,Conjunction,cloud,"sky.")
return(phrase)
}
Wind_relation <- function(status, direction){
x<-("")
x<- paste("the wind will blow",status,direction)
if((status=="calm")||(status=="light air")||(status=="light breeze")||
(status=="gentle breeze")||(status=="moderate breeze")||(status=="fresh breeze")){
return("")
}
else{
return(x)
}
}
TrendDesc_2 <- function(var1,var2){
print("WOOOY")
print(var1)
print(var2)
if(var2>var1){
return("increased to")
}
else if(var2<var1){
return("decreased to")
}
else{
x<-as.integer(runif(1,1,4))
if(x==1){
return("keep stable at")
}
if(x==2){
return("stay stable at")
}
if(x==3){
return("constant at")
}
}
}
#----------------------------- Microplanning for Weather Summary ------------------------------------------#
Contrast_lexicalisation1 <- function(msg1,msg2){
if(msg1[2]==msg2[2]){
return("and")
}else{
return("but")
}
}
MonthlyIntro_lex<-function(){
MI <- as.matrix(read.table(file="wordbank/Monthly_referring_expression.csv", sep=",", header=TRUE))
n=length(MI); i=1
random_value <- as.integer(runif(1,1,n+1))
return(MI[random_value])
}
MonthlyIntro <- MonthlyIntro_lex()
MonthlyMsg1_aggregation<-function(msg1,msg2){
#aggreagation with simple conjunction
conj <- Contrast_lexicalisation1(msg1,msg2)
print("asdasd")
print(msg2[2])
print(msg1[2])
msg<-paste("was",msg1[1],conj,msg2[1],"than average.")
return(msg)
}
MonthlyMsg1 <- MonthlyMsg1_aggregation(MonthlyTempMsg,MonthlyRainfallMsg)
MonthlyMsg2_aggregation<-function(msg1,msg2){
#aggreagation with simple conjunction
if(msg1[2]!=msg2[2]){
contrast<-""
}else{
contrast<-"accordingly"
}
msg<-paste("With",msg1[1],"days,",contrast,"the total rain so far is",msg2[1],".")
return(msg)
}
MonthlyMsg2 <- MonthlyMsg2_aggregation(RainyDaysMsg,RainSoFarMessage)
MonthlyMsg3_aggregation<-function(msg1,msg2){
if(msg2=="x"){
msg<-paste(" There was rain on everyday for ",msg1,". ",sep="")
}
else if(msg1==""){
msg<-msg2
}
else{
msg<-paste("There was rain on everyday for",msg1,"and",msg2)
}
return(msg)
}
MonthlyMsg3 <- MonthlyMsg3_aggregation(RainSpellMsg,RainExtremeMsg)
MonthlyMsg4_aggregation<-function(msg1,msg2){
if(msg2=="false"){
msg<-paste("The wind for the month was",msg1,"in average.")
}
else{
msg<-paste("The wind for the month was",msg1,"in average, but",msg2)
}
return(msg)
}
MonthlyMsg4 <- MonthlyMsg4_aggregation(MonthlyWindMsg,WindExtremeMsg)
MonthlyMsg5_aggregation<-function(msg1,msg2){
if(msg2!=""){
msg<-paste("Average air quality was",msg1,", although",msg2)
}
else{
msg<-paste("Average air quality was ",msg1,".",sep="")
}
}
MonthlyMsg5 <- MonthlyMsg5_aggregation(MonthlyAQMsg,"")
MonthlyMsg6 <- Coldest_day(LMmin_result,LMmean_result,MBLMmean_result)
#-----------------------------------------------------------------------------------------------------------#
AQ_val <- data.frame(good=0,admissible=1,bad=2,hazzardous=3)
print(AQ_seq)
TrendDesc_AQ <- LD_Compare(AQ_seq,AQ_val)
TrendDesc_Temperature <- TrendDesc_2(as.double(TodaysWeather["Temperature"]), as.double(y[,"Average.Temperature"]))
Intro_AQ <- AQ_Intro()
Wind_Description<-Wind_relation(InterpretationResult_windSpeed, InterpretationResult_windDirection)
Temperature_Description<-paste(TrendDesc_Temperature, InterpretationResult_temperature)
Temperature_State<-Temperature_Description
#----------------------------------------------------------#
AQ_Description <- paste(Intro_AQ,TrendDesc_AQ,AQ_seq[3],".")
# print(AQ_Description)
# print(Temperature_Description)
# print(Wind_Description)
Structure_Realization_predict <- function(InterpretationResult_rainfall, InterpretationResult_cloudCoverage){
Rain_State <- InterpretationResult_rainfall
Cloud_State <- InterpretationResult_cloudCoverage
Sky_State <- Sky_Agg(Rain_State,Cloud_State)
Sky_Intro <- Prediction_Intro()
Sky_Sentence <- paste(Sky_Intro,Sky_State)
Temperature_Intro <- Temperature_Intro()
Temperature_Sentence <- paste(Temperature_Intro, Temperature_State)
AQ_Sentence <-AQ_Description
Wind_Sentence <- Wind_Description
Prediction_Result <- paste(Sky_Sentence,Temperature_Sentence, AQ_Sentence,Wind_Sentence)
return(Prediction_Result)
}
Prediction_Result<-Structure_Realization_predict(InterpretationResult_rainfall,InterpretationResult_cloudCoverage)
MonthlyMsg<- paste(MonthlyIntro,MonthlyMsg1,MonthlyMsg2,MonthlyMsg3,MonthlyMsg4,MonthlyMsg5,MonthlyMsg6)
print(strwrap(Prediction_Result, width=60))
cat("\n")
print(strwrap(MonthlyMsg,width=60))
View(MBLMsum_result)
View(MBLMsum_result)
View(MBLMmax_result)
rm(list=ls())
# INITIALIZING
source("dummy2.R", local = TRUE)
# READ DATA
dataset <- read.table(file="Datasets/dummy.csv", sep=",", header=TRUE)
# airQualityDataset <- read.table(file="Datasets/AQ_2016_2017.csv", sep=",", header=TRUE)
#
columnName <- colnames(dataset[ , colnames(dataset) != "DateTime"])
# Predict
datasetPredicted <- PredictDataset(dataset)
# SYGNAL ANALYSIS
# row [N] data, now
datasetNow <- dataset[nrow(dataset), !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
datasetLast <- dataset[nrow(dataset)-1, !colnames(dataset) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(dataset[, !colnames(dataset) == "DateTime"]))
# Statistical Resume
statisticalResume <- StatisticalAnalysis(dataset)
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
# i=1;
# # Today
# for (i in i:length(columnName)) {
#   cat(" Today", columnName[i], " :", as.character(unlist(interpreterNow[i])), "\n\n")
# }
# i=1;
# # Last
# for (i in i:length(columnName)) {
#   cat(" Last", columnName[i], " :", as.character(unlist(interpreterLast[i])), "\n\n")
# }
# i=1;
# # Resume
# for (i in i:length(columnName)) {
#   cat(" Resume", columnName[i], " :", as.character(unlist(interpreterResume[i])), "\n\n")
# }
source("dummy2.R", local = TRUE)
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste(trendIntro,"TREND TREND aaaaaaa")
eventIntro <- ReadIntro(type="Event")
resumeEvent <- paste(eventIntro,"6 value from Xth to Yth")
currentIntro <- ChangeTimeDesc(ReadIntro(type="Current"),dataset["DateTime"])
currentDesc <- CurrentDesc(interpreterLast)
currentAglast <- "higher than ......n-1 data."
currentAgresume <- "and now is the higest from overall."
predictIntro <- ReadIntro(type="Predict")
predictContent <- "Content content content."
predictConc <- "Conclussion from predict result."
resumeResult <- paste(resumeIntro, resumeTrend, resumeEvent)
currentResult <- paste(currentIntro, currentDesc, currentAglast, currentAgresume)
predictResult <- paste(predictIntro, predictContent, predictConc)
resumeResult
currentResult
predictResult
interpreterLast[levels(i)]
interpreterLast[levels(2)]
interpreterLast[levels(1)]
interpreterLast[i,levels(1)]
interpreterLast[1,levels(1)]
interpreterLast[1,'level' =levels(1)]
interpreterLast
interpreterLast[1]
as.character(interpreterLast[1])
as.character(interpreterLast[1][levels(1)])
# INITIALIZING
source("dummy2.R", local = TRUE)
# READ DATA
dataset <- read.table(file="Datasets/dummy.csv", sep=",", header=TRUE)
# airQualityDataset <- read.table(file="Datasets/AQ_2016_2017.csv", sep=",", header=TRUE)
#
columnName <- colnames(dataset[ , colnames(dataset) != "DateTime"])
# Predict
datasetPredicted <- PredictDataset(dataset)
# SYGNAL ANALYSIS
# row [N] data, now
datasetNow <- dataset[nrow(dataset), !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
datasetLast <- dataset[nrow(dataset)-1, !colnames(dataset) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(dataset[, !colnames(dataset) == "DateTime"]))
# Statistical Resume
statisticalResume <- StatisticalAnalysis(dataset)
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
# i=1;
# # Today
# for (i in i:length(columnName)) {
#   cat(" Today", columnName[i], " :", as.character(unlist(interpreterNow[i])), "\n\n")
# }
# i=1;
# # Last
# for (i in i:length(columnName)) {
#   cat(" Last", columnName[i], " :", as.character(unlist(interpreterLast[i])), "\n\n")
# }
# i=1;
# # Resume
# for (i in i:length(columnName)) {
#   cat(" Resume", columnName[i], " :", as.character(unlist(interpreterResume[i])), "\n\n")
# }
source("dummy2.R", local = TRUE)
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste(trendIntro,"TREND TREND aaaaaaa")
eventIntro <- ReadIntro(type="Event")
resumeEvent <- paste(eventIntro,"6 value from Xth to Yth")
currentIntro <- ChangeTimeDesc(ReadIntro(type="Current"),dataset["DateTime"])
currentDesc <- CurrentDesc(interpreterLast)
currentAglast <- "higher than ......n-1 data."
currentAgresume <- "and now is the higest from overall."
predictIntro <- ReadIntro(type="Predict")
predictContent <- "Content content content."
predictConc <- "Conclussion from predict result."
resumeResult <- paste(resumeIntro, resumeTrend, resumeEvent)
currentResult <- paste(currentIntro, currentDesc, currentAglast, currentAgresume)
predictResult <- paste(predictIntro, predictContent, predictConc)
resumeResult
currentResult
predictResult
interpreterLast
interpreterLast[1]
as.character(interpreterLast[1])
as.character(interpreterLast[5])
as.character(interpreterLast[6])
as.character(interpreterLast[7])
as.character(interpreterLast[6])
as.character(interpreterLast[6,"level"])
as.character(interpreterLast[6,"levels"])
as.character(interpreterLast[6,"value"])
as.character(interpreterLast[6,""])
as.character(interpreterLast[6,"6"])
as.character(interpreterLast[6,"2"])
as.character(interpreterLast[1,levels(2)])
as.character(interpreterLast[1]levels(2))
as.character(interpreterLast[1][levels(2)])
as.character(interpreterLast[levels(2)])
as.character(interpreterLast[i][levels(2)])
as.character(interpreterLast[1][levels(2)])
structure(interpreterLast)
interpreterLast["CloudCoverage"]
as.character(interpreterLast["CloudCoverage"])
interpreterLast[31]
interpreterLast[1]
interpreterLast[1,1]
as.character(interpreterLast[1,1])
as.character(interpreterLast[2,1])
as.character(interpreterLast[2,2])
as.character(interpreterLast[2,3])
as.character(interpreterLast[2,4])
as.character(interpreterLast[2,5])
as.character(interpreterLast[2,0])
as.character(interpreterLast[1,2])
as.character(interpreterLast[1,3])
# INITIALIZING
source("dummy2.R", local = TRUE)
# READ DATA
dataset <- read.table(file="Datasets/dummy.csv", sep=",", header=TRUE)
# airQualityDataset <- read.table(file="Datasets/AQ_2016_2017.csv", sep=",", header=TRUE)
#
columnName <- colnames(dataset[ , colnames(dataset) != "DateTime"])
# Predict
datasetPredicted <- PredictDataset(dataset)
# SYGNAL ANALYSIS
# row [N] data, now
datasetNow <- dataset[nrow(dataset), !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
datasetLast <- dataset[nrow(dataset)-1, !colnames(dataset) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(dataset[, !colnames(dataset) == "DateTime"]))
# Statistical Resume
statisticalResume <- StatisticalAnalysis(dataset)
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
# i=1;
# # Today
# for (i in i:length(columnName)) {
#   cat(" Today", columnName[i], " :", as.character(unlist(interpreterNow[i])), "\n\n")
# }
# i=1;
# # Last
# for (i in i:length(columnName)) {
#   cat(" Last", columnName[i], " :", as.character(unlist(interpreterLast[i])), "\n\n")
# }
# i=1;
# # Resume
# for (i in i:length(columnName)) {
#   cat(" Resume", columnName[i], " :", as.character(unlist(interpreterResume[i])), "\n\n")
# }
source("dummy2.R", local = TRUE)
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste(trendIntro,"TREND TREND aaaaaaa")
eventIntro <- ReadIntro(type="Event")
resumeEvent <- paste(eventIntro,"6 value from Xth to Yth")
currentIntro <- ChangeTimeDesc(ReadIntro(type="Current"),dataset["DateTime"])
currentDesc <- CurrentDesc(interpreterLast)
currentAglast <- "higher than ......n-1 data."
currentAgresume <- "and now is the higest from overall."
predictIntro <- ReadIntro(type="Predict")
predictContent <- "Content content content."
predictConc <- "Conclussion from predict result."
resumeResult <- paste(resumeIntro, resumeTrend, resumeEvent)
currentResult <- paste(currentIntro, currentDesc, currentAglast, currentAgresume)
predictResult <- paste(predictIntro, predictContent, predictConc)
resumeResult
currentResult
predictResult
