AQdata
AQdataLast <- PredictDataset(datas)
datas <- read.table(file="Datasets/AQ_2013_2014.csv", sep=",", header=TRUE)
AQdataLast <- PredictDataset(datas)
dataset
tail(dataset)
datas
PredictDataset<-function(dataset, format="%m/%d/%Y %H:%M"){
result <- c()
lengthWithoutDate <-  length(dataset[,-which(colnames(dataset) == "DateTime")])
dataSeries <- xts(dataset[,-which(colnames(dataset) == "DateTime")], order.by=as.Date(dataset[,"DateTime"], format))
i<-1
for(i in i:lengthWithoutDate){
result[i] <- forecast(dataSeries[,i], h=1)$mean
}
names(result) <- colnames(dataset[ , colnames(dataset) != "DateTime"])
print(result)
}
AQdataLast <- PredictDataset(datas, "%d/%m/%Y")
AirQualityCalculation(AQdataLast)
asd <- AirQualityCalculation(AQdataLast)
asd
DataInterpreterAdjective(44)
DataInterpreterAdjective(44, type="AirQuality")
AQvalLast <- AirQualityCalculation(AQdataLast)$InterpreterIndex
AirQualityCalculation(AQdataLast)
AQvalLast <- AirQualityCalculation(AQdataLast)
AQvalnow <- AirQualityCalculation(AQdatanow)
AQdatanow <- datas[nrow(datas),case3]
AQdataPredict <- PredictDataset(datas, "%d/%m/%Y")
AQvalLast <- AirQualityCalculation(AQdataLast)
AQvalnow <- AirQualityCalculation(AQdatanow)
AQvalPredict <- AirQualityCalculation(AQdataPredict)
AQInterpreterLast <- DataInterpreterAdjective(AQvalLast, type="AirQuality")$InterpreterIndex
AQInterpreterNow <- DataInterpreterAdjective(AQvalnow, type="AirQuality")$InterpreterIndex
AQInterpreterPredict <- DataInterpreterAdjective(AQvalPredict, type="AirQuality")$InterpreterIndex
AQsequence <- LD_Compare(c(AQvalLast, AQvalnow, AQvalPredict))
AQsequence
TrendDescTemperature(AQsequence)
TrendDescTemperature(AQsequence)
AQsequence
TrendDesc_template(AQsequence)
AQtrendDesc <- change_word_bank_AQ(AQsequence)
AQtrendDesc
ReadIntro <- function(type="General"){
type
if(type == "Current" ||
type == "Trend" || type == "Event" ||
type == "Predict" || type == "PredictConj"  ||
type == "Temperature" || type == "AirQuality"  ){
corpus <- as.matrix(read.table(file=paste0("Corpus/",type,"Intro.csv"), header=FALSE, sep=';', quote=""))
# print(corpus)
n <- length(corpus)
random_value <- as.integer(runif(1,1,n+0.5))
result <- corpus[random_value]
return (result)
}else{
return("Woops no data intro!");
}
# return("Woops no data intro!");
}
AQintro <- ReadIntro(type="AirQuality")
AQintro
AQintro <- ReadIntro(type="AirQuality")
AQintro
AQintro <- ReadIntro(type="AirQuality")
AQintro
AQsentence <- paste(AQintro, AQtrendDesc, AQInterpreterPredict)
AQsentence
AQstate<- DataInterpreterAdjective(AQvalPredict, type="AirQuality")$InterpreterReult
AQsentence <- paste(AQintro, AQtrendDesc, AQstate)
AQsentence
AQstate
AQstate<- DataInterpreterAdjective(AQvalPredict, type="AirQuality")$InterpreterReult
AQstate
AQstate<- DataInterpreterAdjective(AQvalPredict, type="AirQuality")$InterpreterResult
AQsentence <- paste(AQintro, AQtrendDesc, AQstate)
AQsentence
case1 <- c("Rainfall","CloudCoverage")
case3 <- c("CO","NO","NO2","NOX","O3","PM10","PM25","SO2")
c(case1,case2)
c(case1,case3)
IsSpecialCorpusAvailable <- function(interpreterPredict, colName){
case1 <- c("Rainfall","CloudCoverage")
case2 <- c("Temperature")
case3 <- c("CO","NO","NO2","NOX","O3","PM10","PM25","SO2")
boolcase1 <- case1 %in% colName
boolcase2 <- case2 %in% colName
boolcase3 <- case3 %in% colName
result <- NULL
vectorResult <- NULL
#CASE 1: (SKY STATE SENTENCE, RAINFALL & CLOUD COVERAGE)
if(sum(boolcase1 == "FALSE") == 0){
#get the rainstate from list
rainState <- lapply(interpreterPredict,`[[`, which(interpreterPredict$Colname == "Rainfall"))$InterpreterResult
cloudState <- lapply(interpreterPredict,`[[`, which(interpreterPredict$Colname == "CloudCoverage"))$InterpreterResult
skyState <- skyStateAgg(rainState, cloudState)
skyIntro <- ReadIntro(type="Predict")
skyIntro <- gsub("@conj", "tomorrow sky will be", skyIntro)
skySentence <- paste(skyIntro, skyState)
result <- paste(skySentence)
vectorResult <- case1
#CASE 2: (TEMPERATURE SENTENCE)
}else if(sum(boolcase2 == "FALSE") != 0){
#get all value when list$colname value == temperature
temperatureState <- lapply(interpreterPredict,`[[`, which(interpreterPredict$Colname == "Temperature"))$InterpreterResult
temperatureIntro <- ReadIntro(type = "Temperature")
temperatureTrendDesc<- TrendDescTemperature()
temperatureSentence <- paste(temperatureIntro, temperatureTrendDesc, temperatureState)
result <- paste(result, temperatureSentence)
vectorResult <- c(vectorResult, case2)
#CASE3: (AIR QUALITY SENTENCE)
}else if(sum(boolcase3 == "FALSE") != 0){
AQdataLast <- datas[-1,case3]
AQdatanow <- datas[nrow(datas),case3]
AQdataPredict <- PredictDataset(datas, "%d/%m/%Y")
AQvalLast <- AirQualityCalculation(AQdataLast)
AQvalnow <- AirQualityCalculation(AQdatanow)
AQvalPredict <- AirQualityCalculation(AQdataPredict)
AQInterpreterLast <- DataInterpreterAdjective(AQvalLast, type="AirQuality")$InterpreterIndex
AQInterpreterNow <- DataInterpreterAdjective(AQvalnow, type="AirQuality")$InterpreterIndex
AQInterpreterPredict <- DataInterpreterAdjective(AQvalPredict, type="AirQuality")$InterpreterIndex
AQsequence <- LD_Compare(c(AQvalLast, AQvalnow, AQvalPredict))
AQintro <- ReadIntro(type="AirQuality")
AQtrendDesc <- change_word_bank_AQ(AQsequence)
AQstate<- DataInterpreterAdjective(AQvalPredict, type="AirQuality")$InterpreterResult
AQsentence <- paste(AQintro, AQtrendDesc, AQstate)
result <- paste(result, AQsentence)
vectorResult <- c(vectorResult, case3)
}
return(list(Sentence = result, VectorResult = vectorResult))
}
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
specialCorpus <- IsSpecialCorpusAvailable(interpreterPredicted, columnName)
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
specialCorpus <- IsSpecialCorpusAvailable(interpreterPredict, columnName)
specialCorpus
rm(list=ls())
#setwd("~/GitHub/D2T_Apps")
setwd("~/Programming/GitHub/D2T_Apps")
# INITIALIZING
source("D2T_Machine.R", local = TRUE)
# READ DATA
dataset <- read.table(file="Datasets/exc_2001.csv", sep=",", header=TRUE)
# dataset <- read.table(file="Datasets/dummy1.csv", sep=",", header=TRUE)
datasetWithoutDate <- dataset[ , colnames(dataset) != "DateTime"]
# airQualityDataset <- read.table(file="Datasets/AQ_2016_2017.csv", sep=",", header=TRUE)
datasetIntervalValue <- DateInterval(dataset[2,"DateTime"], dataset[1,"DateTime"])
#
columnName <- colnames(dataset[ , colnames(dataset) != "DateTime"])
# Predict
datasetPredicted <- PredictDataset(dataset)
# SYGNAL ANALYSIS
# row [N] data, now
datasetNow <- dataset[nrow(dataset), !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
datasetLast <- dataset[nrow(dataset)-1, !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
dataset2Last <- dataset[nrow(dataset)-2, !colnames(dataset) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(dataset[, !colnames(dataset) == "DateTime"]))
# Statistical Resume
statisticalResume <- StatisticalAnalysis(dataset)
i <- 1
vectorTrendAnalysisResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
vectorTrendAnalysisResult[i] <- TrendAnalysis(1, vectorColumn)
}
#merging main analysis DF with trend column
statisticalResume$Trend <- vectorTrendAnalysisResult
#Repeated value analysis
i <- 1
listRepeatedAnalysisResult <- list()
vectorRepValueResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
listRepeatedAnalysisResult[[i]] <- ResumeRepeatedAnalysis(vectorColumn)
vectorRepValueResult[i] <- listRepeatedAnalysisResult[[i]]$RepValue
}
#highsest growth analysis
i <- 1
vectorHighestGrowthAnalysisResult <- c()
vectorInterpreterRes <- list()
vectorInterpreterIndex <- c()
vectorStartIndex <- c()
vectorEndIndex <- c()
vectorGrowth <- c()
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Growth")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestGrowth <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
highestInterpreterIndex <- max(vectorInterpreterIndex)
dfHighestGrowth <- dfHighestGrowth[dfHighestGrowth$vectorInterpreterIndex == 5,]
dfHighestGrowth$colName <- columnName[as.numeric(rownames(dfHighestGrowth))]
vectorSentenceHighestGrowth <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestGrowth, type = "Growth")
#highsest Decay analysis
i <- 1
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Decay")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestDecay <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
highestInterpreterIndex <- min(vectorInterpreterIndex)
dfHighestDecay <- dfHighestDecay[dfHighestDecay$vectorInterpreterIndex == 1,]
dfHighestDecay$colName <- columnName[as.numeric(rownames(dfHighestDecay))]
vectorSentenceHighestDecay <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestDecay, type = "Decay")
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreter2Last <- DataInterpreter(dataset2Last, statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
interpreterPredict <- DataInterpreter(datasetPredicted,statisticalResume)
# RESUME LEXICAL PROCESS
i <- 1
vectorTrendDescriptionAnalysis <- c()
for(i in i:length(datasetWithoutDate)){
last2Index <- interpreter2Last$InterpreterIndex[i]
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
vectorSequenceIndex <- c(last2Index, lastIndex, nowIndex)
print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
# i=1;
# # Today
# for (i in i:length(columnName)) {
#   cat(" Today", columnName[i], " :", as.character(unlist(interpreterNow[i])), "\n\n")
# }
# i=1;
# # Last
# for (i in i:length(columnName)) {
#   cat(" Last", columnName[i], " :", as.character(unlist(interpreterLast[i])), "\n\n")
# }
# i=1;
# # Resume
# for (i in i:length(columnName)) {
#   cat(" Resume", columnName[i], " :", as.character(unlist(interpreterResume[i])), "\n\n")
# }
#eventIntro <- ReadIntro(type="Event")
#resumeEvent <- paste(eventIntro,"6 value from Xth to Yth")
i <- 1
maxValue <- 0
maxIndex <- 0
for(i in i:length(listRepeatedAnalysisResult)){
if(listRepeatedAnalysisResult[[i]]$RepValue > maxValue){
maxValue <- listRepeatedAnalysisResult[[i]]$RepValue
maxIndex <- i
}
}
if(maxValue != 0){
i <- 1
vectorRepeatedInterpretResult <- c()
selectedColumn <- columnName[maxIndex]
for(i in i:length(listRepeatedAnalysisResult[[maxIndex]]$Start)){
selectedIndex <-listRepeatedAnalysisResult[[maxIndex]]$Start[i]
selectedValue <- datasetWithoutDate[[selectedColumn]][selectedIndex]
print(selectedValue)
vectorRepeatedInterpretResult[[i]] <- DataInterpreterAdjective(selectedValue, selectedColumn, statisticalResume)$InterpreterResult
}
}
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste0(trendIntro," ",ResumeTrend(statisticalResume),".")
if(maxValue != 0){
resumeRepeated <- ResumeRepeated2(columnName[[maxIndex]], dataset, vectorRepeatedInterpretResult, listRepeatedAnalysisResult[[maxIndex]]$Start, listRepeatedAnalysisResult[[maxIndex]]$End)
resumeRepeated <- paste("There were some repeated value more than 4 days: ", resumeRepeated)
}else{
resumeRepeated <- "There were no repeating values within 4 days or more, every value changed from time to time."
}
resumeHighestGrowth <- AggResumeGrowth(vectorSentenceHighestGrowth, vectorSentenceHighestDecay)
resumeResult <- paste(resumeIntro, resumeTrend, resumeRepeated, resumeHighestGrowth)
#
currentIntro <- ReadCurrentIntro(dataset[nrow(dataset),"DateTime"])
currentDesc <- CurrentDesc(interpreterNow, vectorTrendDescriptionAnalysis, datasetWithoutDate)
currentResult <- paste(currentIntro, currentDesc)
# PREDICT LEXICAL PROCESS
i <- 1
vectorTrendDescriptionAnalysis <- c()
for(i in i:length(datasetWithoutDate)){
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
predictIndex <- interpreterPredict$InterpreterIndex[i]
vectorSequenceIndex <- c(lastIndex, nowIndex, predictIndex)
print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
specialCorpus <- IsSpecialCorpusAvailable(interpreterPredict, columnName)
predictIntro <- ReadPredictIntro(ReadIntro(type="Predict"))
predictContent <- CurrentDesc(interpreterPredict,vectorTrendDescriptionAnalysis,datasetWithoutDate)
predictResult <- paste(predictIntro, predictContent)
# currentResult <- paste(currentIntro, currentDesc, currentAglast, currentAgresume)
# currentResult <- paste(currentIntro, currentDesc)
# predictResult <- paste(predictIntro, predictContent, predictConc)
# source("D2T_Machine.R", local = TRUE)
resumeResult
currentResult
predictResult
vectorTrendDescriptionAnalysis
#setwd("~/GitHub/D2T_Apps")
setwd("~/Programming/GitHub/D2T_Apps")
# INITIALIZING
source("D2T_Machine.R", local = TRUE)
# READ DATA
dataset <- read.table(file="Datasets/exc_2001.csv", sep=",", header=TRUE)
# dataset <- read.table(file="Datasets/dummy1.csv", sep=",", header=TRUE)
datasetWithoutDate <- dataset[ , colnames(dataset) != "DateTime"]
# airQualityDataset <- read.table(file="Datasets/AQ_2016_2017.csv", sep=",", header=TRUE)
datasetIntervalValue <- DateInterval(dataset[2,"DateTime"], dataset[1,"DateTime"])
#
columnName <- colnames(dataset[ , colnames(dataset) != "DateTime"])
# Predict
datasetPredicted <- PredictDataset(dataset)
# SYGNAL ANALYSIS
# row [N] data, now
datasetNow <- dataset[nrow(dataset), !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
datasetLast <- dataset[nrow(dataset)-1, !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
dataset2Last <- dataset[nrow(dataset)-2, !colnames(dataset) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(dataset[, !colnames(dataset) == "DateTime"]))
# Statistical Resume
statisticalResume <- StatisticalAnalysis(dataset)
i <- 1
vectorTrendAnalysisResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
vectorTrendAnalysisResult[i] <- TrendAnalysis(1, vectorColumn)
}
#merging main analysis DF with trend column
statisticalResume$Trend <- vectorTrendAnalysisResult
#Repeated value analysis
i <- 1
listRepeatedAnalysisResult <- list()
vectorRepValueResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
listRepeatedAnalysisResult[[i]] <- ResumeRepeatedAnalysis(vectorColumn)
vectorRepValueResult[i] <- listRepeatedAnalysisResult[[i]]$RepValue
}
#highsest growth analysis
i <- 1
vectorHighestGrowthAnalysisResult <- c()
vectorInterpreterRes <- list()
vectorInterpreterIndex <- c()
vectorStartIndex <- c()
vectorEndIndex <- c()
vectorGrowth <- c()
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Growth")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestGrowth <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
highestInterpreterIndex <- max(vectorInterpreterIndex)
dfHighestGrowth <- dfHighestGrowth[dfHighestGrowth$vectorInterpreterIndex == 5,]
dfHighestGrowth$colName <- columnName[as.numeric(rownames(dfHighestGrowth))]
vectorSentenceHighestGrowth <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestGrowth, type = "Growth")
#highsest Decay analysis
i <- 1
for(i in i:length(datasetWithoutDate)){
listColumn <- datasetWithoutDate[[i]]
listHighestGrowthAnalysisResult <- ResumeHighestGrowthAnalysis(diff(listColumn),"Decay")
vectorGrowth[i] <-listHighestGrowthAnalysisResult$valueResult
vectorStartIndex[i] <-listHighestGrowthAnalysisResult$startIndexResult
vectorEndIndex[i] <-listHighestGrowthAnalysisResult$endIndexResult
#vectorInterpreterRes[[i]] <- MembershipFuzzy(vectorGrowth, TrendFuzzyGenerator(columnName[i], statisticalResume))
vectorInterpreterIndex[i] <- MembershipFuzzy(vectorGrowth[i], TrendFuzzyGenerator(columnName[i], statisticalResume))$InterpreterIndex
}
#exception
vectorEndIndex <- vectorEndIndex + 1
#Combine all process into df
dfHighestDecay <- data.frame(vectorGrowth, vectorStartIndex, vectorEndIndex, vectorInterpreterIndex)
highestInterpreterIndex <- min(vectorInterpreterIndex)
dfHighestDecay <- dfHighestDecay[dfHighestDecay$vectorInterpreterIndex == 1,]
dfHighestDecay$colName <- columnName[as.numeric(rownames(dfHighestDecay))]
vectorSentenceHighestDecay <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfHighestDecay, type = "Decay")
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreter2Last <- DataInterpreter(dataset2Last, statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
interpreterPredict <- DataInterpreter(datasetPredicted,statisticalResume)
# RESUME LEXICAL PROCESS
i <- 1
vectorTrendDescriptionAnalysis <- c()
for(i in i:length(datasetWithoutDate)){
last2Index <- interpreter2Last$InterpreterIndex[i]
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
vectorSequenceIndex <- c(last2Index, lastIndex, nowIndex)
print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
# i=1;
# # Today
# for (i in i:length(columnName)) {
#   cat(" Today", columnName[i], " :", as.character(unlist(interpreterNow[i])), "\n\n")
# }
# i=1;
# # Last
# for (i in i:length(columnName)) {
#   cat(" Last", columnName[i], " :", as.character(unlist(interpreterLast[i])), "\n\n")
# }
# i=1;
# # Resume
# for (i in i:length(columnName)) {
#   cat(" Resume", columnName[i], " :", as.character(unlist(interpreterResume[i])), "\n\n")
# }
#eventIntro <- ReadIntro(type="Event")
#resumeEvent <- paste(eventIntro,"6 value from Xth to Yth")
i <- 1
maxValue <- 0
maxIndex <- 0
for(i in i:length(listRepeatedAnalysisResult)){
if(listRepeatedAnalysisResult[[i]]$RepValue > maxValue){
maxValue <- listRepeatedAnalysisResult[[i]]$RepValue
maxIndex <- i
}
}
if(maxValue != 0){
i <- 1
vectorRepeatedInterpretResult <- c()
selectedColumn <- columnName[maxIndex]
for(i in i:length(listRepeatedAnalysisResult[[maxIndex]]$Start)){
selectedIndex <-listRepeatedAnalysisResult[[maxIndex]]$Start[i]
selectedValue <- datasetWithoutDate[[selectedColumn]][selectedIndex]
print(selectedValue)
vectorRepeatedInterpretResult[[i]] <- DataInterpreterAdjective(selectedValue, selectedColumn, statisticalResume)$InterpreterResult
}
}
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste0(trendIntro," ",ResumeTrend(statisticalResume),".")
if(maxValue != 0){
resumeRepeated <- ResumeRepeated2(columnName[[maxIndex]], dataset, vectorRepeatedInterpretResult, listRepeatedAnalysisResult[[maxIndex]]$Start, listRepeatedAnalysisResult[[maxIndex]]$End)
resumeRepeated <- paste("There were some repeated value more than 4 days: ", resumeRepeated)
}else{
resumeRepeated <- "There were no repeating values within 4 days or more, every value changed from time to time."
}
resumeHighestGrowth <- AggResumeGrowth(vectorSentenceHighestGrowth, vectorSentenceHighestDecay)
resumeResult <- paste(resumeIntro, resumeTrend, resumeRepeated, resumeHighestGrowth)
#
currentIntro <- ReadCurrentIntro(dataset[nrow(dataset),"DateTime"])
currentDesc <- CurrentDesc(interpreterNow, vectorTrendDescriptionAnalysis, datasetWithoutDate)
currentResult <- paste(currentIntro, currentDesc)
# PREDICT LEXICAL PROCESS
i <- 1
vectorTrendDescriptionPredict <- c()
for(i in i:length(datasetWithoutDate)){
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
predictIndex <- interpreterPredict$InterpreterIndex[i]
vectorSequenceIndex <- c(lastIndex, nowIndex, predictIndex)
print(vectorSequenceIndex)
vectorTrendDescriptionPredict[i] <- LD_Compare(vectorSequenceIndex)
}
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
specialCorpus <- IsSpecialCorpusAvailable(interpreterPredict, columnName)
predictIntro <- ReadPredictIntro(ReadIntro(type="Predict"))
predictContent <- CurrentDesc(interpreterPredict,vectorTrendDescriptionAnalysis,datasetWithoutDate)
predictResult <- paste(predictIntro, predictContent)
# currentResult <- paste(currentIntro, currentDesc, currentAglast, currentAgresume)
# currentResult <- paste(currentIntro, currentDesc)
# predictResult <- paste(predictIntro, predictContent, predictConc)
# source("D2T_Machine.R", local = TRUE)
resumeResult
currentResult
predictResult
vectorTrendDescriptionPredict
vectorTrendDescriptionAnalysis
vectorTrendDescriptionPredict == vectorTrendDescriptionAnalysis
dif(datasetNow, datasetPredicted)
diff(datasetNow, datasetPredicted)
datasetPredicted - datasetNow
datasetPredicted
datasetNow
-4.534035e-05
