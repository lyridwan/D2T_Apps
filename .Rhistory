setwd("~/GitHub/D2T_Apps")
# INITIALIZING
source("D2T_Machine.R", local = TRUE)
# source("UnspecificHandling.R", local = TRUE)
# source("SignalAnalysis.R", local = TRUE)
# source("DataInterpretation.R", local = TRUE)
# source("DocumentPlanning.R", local = TRUE)
# source("Microplanning.R", local = TRUE)
#-----------------------
# GENERAL DATA HANDLER |
#-----------------------
# Force read, with default parameter v2,v3,v4,etc if there's no header available
filename <- "DataTest#1"
dataset <- as.data.frame(fread(file=paste0("DatasetsExperiment/",filename,".csv")))
colnames(dataset)[1] <- "DateTime"
dataTitle <- readChar("Config/datatitle.csv", file.info("Config/datatitle.csv")$size)
# Dataset with datetime Column dropped
datasetWithoutDate <- dataset[ , colnames(dataset) != "DateTime"]
# Parameter Header
columnName <- colnames(datasetWithoutDate)
#-----------------------
#   PARAMETER CONFIG   |
#-----------------------
mainConfig <- ReadConfig()
#-----------------------
#   SPLITTING DATASET  | 1. Numerical Dataset
#-----------------------
# Listing all categorical parameter
categoricalType <- c("categorical", "factors", "character")
catColName <- mainConfig[mainConfig$Type %in% categoricalType, "ColName"]
# Numerical Dataset initialization
datasetNumerical <- dataset[, !names(dataset) %in% catColName]
datasetNumericalWithoutDate <- datasetNumerical[ , colnames(datasetNumerical) != "DateTime"]
columnNameNumerical <- colnames(datasetNumericalWithoutDate)
#-----------------------
#   SPLITTING DATASET  | 2. Categorical Dataset
#-----------------------
if(length(catColName) != 0){
if(length(catColName) == 1){
datasetCategoricalWithoutDate <- dataset[, catColName]
datasetCategorical <- cbind(dataset["DateTime"], datasetCategoricalWithoutDate)
colnames(datasetCategorical)[2] <- catColName
}else{
datasetCategoricalWithoutDate <- dataset[, colnames(dataset) %in% catColName]
datasetCategorical <- cbind(dataset["DateTime"], datasetCategoricalWithoutDate)
}
}
#-----------------------
#  DATE TIME INTERVAL  |
#-----------------------
# Dataset Interval
datasetIntervalValue <- DateInterval(dataset[2,"DateTime"], dataset[1,"DateTime"])
# SYGNAL ANALYSIS: 1.Data Summarizing
# -------------Begin-------------
# Statistical Resume
statisticalResume <- StatisticalAnalysis(datasetNumerical)
i <- 1
vectorTrendAnalysisResult <- c()
for(i in i:length(datasetNumericalWithoutDate)){
vectorColumn <- datasetNumericalWithoutDate[[i]]
minValue <- as.numeric(as.character(statisticalResume$MinValue)[i])
maxValue <- as.numeric(as.character(statisticalResume$MaxValue)[i])
vectorTrendAnalysisResult[i] <- TrendAnalysis(1, vectorColumn, minValue, maxValue)
}
#merging main analysis DF with trend column
statisticalResume$Trend <- vectorTrendAnalysisResult
# ------------End------------
# SYGNAL ANALYSIS: 2.Extreme Event
# ------------Begin------------
dfExtremeGrowth <- ResumeEventExtreme(datasetNumericalWithoutDate, statisticalResume, "Growth")
dfExtremeDecay <- ResumeEventExtreme(datasetNumericalWithoutDate, statisticalResume, "Decay")
dfExtremeEvent <- cbind(columnNameNumerical, dfExtremeGrowth, dfExtremeDecay)
# ------------End------------
# SYGNAL ANALYSIS: 3.Repeated Event
# ------------Begin------------
# Function: ResumeRepeatedAnalysis()
# Purpose: Analyzing Repeated Event
# Result variable: listRepeatedAnalysisResult
i <- 1
listRepeatedAnalysisResult <- list()
for(i in i:length(datasetNumericalWithoutDate)){
vectorColumn <- datasetNumericalWithoutDate[[i]]
listRepeatedAnalysisResult[[i]] <- ResumeRepeatedAnalysis(vectorColumn)
}
# ------------End------------
# SYGNAL ANALYSIS: 4.Predicting
# ------------Begin------------
datasetPredicted <- PredictDataset(datasetNumerical)
# ------------End------------
# SYGNAL ANALYSIS: 5.Motif Discovery
# ------------Begin------------
MDinterpreterResult <- MotifDiscoveryInterpreter(datasetWithoutDate, datasetIntervalValue)
# ------------End------------
# SYGNAL ANALYSIS: 6.Correlation
# ------------Begin------------
correlationResult <- CorrelationAnalysis(datasetNumericalWithoutDate)
# ------------End------------
# DATA INTERPRETATION: 0.Preparation
# ------------Begin------------
# row [N] data, now
datasetNow <- datasetNumerical[nrow(datasetNumerical), !colnames(datasetNumerical) == "DateTime"]
# row[N-1] data, before now
datasetLast <- datasetNumerical[nrow(datasetNumerical)-1, !colnames(datasetNumerical) == "DateTime"]
# row[N-2] data, before now
dataset2Last <- datasetNumerical[nrow(datasetNumerical)-2, !colnames(datasetNumerical) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(datasetNumerical[, !colnames(datasetNumerical) == "DateTime"]))
# ------------End------------
# SYGNAL ANALYSIS: 2.Extreme Event
# ------------Begin------------
comparsionResult <- ComparsionAnalysis(datasetNow, datasetNumerical, datasetIntervalValue)
# ------------End------------
# DATA INTERPRETATION: 1. Inpterpretating data
# ------------Begin------------
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreter2Last <- DataInterpreter(dataset2Last, statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
interpreterPredict <- DataInterpreter(datasetPredicted,statisticalResume)
# ------------End------------
# RESUME LEXICAL PROCESS
i <- 1
vectorTrendDescriptionAnalysis <- c()
for(i in i:length(datasetNumericalWithoutDate)){
last2Index <- interpreter2Last$InterpreterIndex[i]
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
vectorSequenceIndex <- c(last2Index, lastIndex, nowIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
# STRUCTURE REALISATION
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName, dataTitle)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste0(trendIntro," ",ResumeTrend(statisticalResume))
resumeComparsion <- ComparsionMessage(datasetNow, comparsionResult, datasetIntervalValue)
resumeRepeated <- RepeatedEventDocPlanning(listRepeatedAnalysisResult)
MDdocPlanResult <- MotifDiscoveryDocPlan(MDinterpreterResult)
resumeMotifDiscovery <- MotifDiscoveryMicroPlan(MDdocPlanResult, MDinterpreterResult)
resumeCorrelationRoutine <- CorrelationRoutineMessage(correlationResult)
resumeCorrelationSignificant <- CorrelationSignificantMessage(correlationResult)
resumeCorrelation <- paste(resumeCorrelationRoutine, resumeCorrelationSignificant)
resumeExtremeEvent <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfExtremeEvent)
resumeResult <- paste(resumeIntro, resumeTrend, resumeComparsion, resumeRepeated, resumeExtremeEvent, resumeMotifDiscovery, resumeCorrelation)
#
currentIntro <- ReadCurrentIntro(dataset[nrow(dataset),"DateTime"])
currentDesc <- CurrentDesc(interpreterNow, vectorTrendDescriptionAnalysis, datasetNumericalWithoutDate)
currentHighest <- CurrentHighest(datasetNow, statisticalResume, datasetIntervalValue)
currentResult <- paste(currentIntro, currentDesc, currentHighest)
# PREDICT LEXICAL PROCESS
i <- 1
vectorTrendDescriptionPredict <- c()
for(i in i:length(datasetNumericalWithoutDate)){
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
predictIndex <- interpreterPredict$InterpreterIndex[i]
vectorSequenceIndex <- c(lastIndex, nowIndex, predictIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionPredict[i] <- LD_Compare(vectorSequenceIndex)
}
# STRUCTURE REALISATION
predictIntro <- ReadPredictIntro(ReadIntro(type="Predict"))
specialCorpus <- IsSpecialCorpusAvailable(interpreterPredict, columnNameNumerical)
if(!is.null(specialCorpus$Sentence)){
predictIntro <- paste(predictIntro, specialCorpus$Sentence)
}
# STRUCTURE REALISATION
predictContent <- PredictDesc(interpreterPredict,vectorTrendDescriptionPredict,datasetWithoutDate)
predictResult <- paste(predictIntro, predictContent)
# STRUCTURE REALISATION
resumeResult <- PostProcessing(resumeResult)
currentResult <- PostProcessing(currentResult)
predictResult <- PostProcessing(predictResult)
print(resumeResult)
print(currentResult)
print(predictResult)
source("plot.R", local = TRUE)
print("---FINISH---")
source("plot.R", local = TRUE)
statisticalResume
View(statisticalResume)
TrendAnalysis(1, datasetNumericalWithoutDate[[1]], as.numeric(as.character(statisticalResume$MinValue)[1], as.numeric(as.character(statisticalResume$MaxValue)[1])
)
)
TrendAnalysis(1, vectorColumn, as.numeric(as.character(statisticalResume$MinValue)[1], as.numeric(as.character(statisticalResume$MaxValue)[1])
i <- 1
vectorTrendAnalysisResult <- c()
for(i in i:length(datasetNumericalWithoutDate)){
vectorColumn <- datasetNumericalWithoutDate[[i]]
minValue <- as.numeric(as.character(statisticalResume$MinValue)[i])
maxValue <- as.numeric(as.character(statisticalResume$MaxValue)[i])
vectorTrendAnalysisResult[i] <- TrendAnalysis(1, vectorColumn, minValue, maxValue)
}
i <- 1
vectorColumn <- datasetNumericalWithoutDate[[i]]
minValue <- as.numeric(as.character(statisticalResume$MinValue)[i])
maxValue <- as.numeric(as.character(statisticalResume$MaxValue)[i])
vectorTrendAnalysisResult[i] <- TrendAnalysis(1, vectorColumn, minValue, maxValue)
averageResume
datasetLast
datasetNow
dfExtremeEvent
comparsionResult
source("plot.R", local = TRUE)
source("plot.R", local = TRUE)
listRepeatedAnalysisResult
plot(datasetCategorical)
set.seed(0); mat <- matrix(sample(letters[1:7], 5 * 10, TRUE), nrow = 5)
if (is.matrix(mat)) v <- as.character(mat)
if (is.data.frame(mat)) v <- as.character(unlist(mat, use.names = FALSE))
lev <- sort(unique(v))
mat_int <- matrix(match(v, lev), nrow = nrow(mat))
matplot(t(mat_int), yaxt = "n", type = "l", xlab = "time", ylab = "category")
matplot(datasetCategorical, yaxt = "n", type = "l", xlab = "time", ylab = "category")
matplot(datasetCategorical, yaxt = "n", type = "o", xlab = "index", ylab = "category")
datasetCategorical
datasetCategorical[[1]]
datasetCategorical[[2]]
matplot(datasetCategorical[[2]], yaxt = "n", type = "o", xlab = "index", ylab = "category")
mat <- datasetCategorical[[2]]
if (is.data.frame(mat)) v <- as.character(unlist(mat, use.names = FALSE))
v
if (is.matrix(mat)) v <- as.character(mat)
v
match(mat, lev)
as.numeric(mat)
mat <- as.numeric(mat)
plot(mat, xlab="Index", ylab="Value", y=y, x=x, type="o", lwd=1)
plot(main = "Param3", xlab="Index", ylab="Value", y=mat, x=seq(1:nrow(dataset)), type="o", lwd=1)
x <- seq(1:nrow(dataset))
lines(mat[14:20], y[14:20], col="yellow", lwd=2)
lines(mat[14:20], y[14:20], col="yellow", lwd=2)
lines(x[14:20], mat[14:20], col="green", lwd=2)
lines(x[14:20], mat[14:20], col="yellow", lwd=2)
lines(x[2:8], mat[2:8], col="yellow", lwd=2)
datasetCategorical[[1]]
datasetCategorical[[2]]
mat <- c(4,2,3,3,3,1,2,4,3,4,1,5,5,1,3,3,3,1,2,4)
plot(main = "Param3", xlab="Index", ylab="Value", y=mat, x=seq(1:nrow(dataset)), type="o", lwd=1)
lines(x[2:8], mat[2:8], col="yellow", lwd=2)
lines(x[14:20], mat[14:20], col="yellow", lwd=2)
MDinterpreterResult
MDdocPlanResult
resumeMotifDiscovery
MDinterpreterResult
correlationResult
plot(datasetNumericalWithoutDate[[1]], datasetNumericalWithoutDate[[2]])
abline(lm(datasetNumericalWithoutDate[[1]]~datasetNumericalWithoutDate[[2]]))
abline(lm(datasetNumericalWithoutDate[[1]]~datasetNumericalWithoutDate[[2]]))
abline(lm(datasetNumericalWithoutDate[[1]]~datasetNumericalWithoutDate[[2]])
lm(datasetNumericalWithoutDate[[1]]~datasetNumericalWithoutDate[[2]]
)
abline(lm(datasetNumericalWithoutDate[[1]]~datasetNumericalWithoutDate[[2]]))
abline(lm(datasetNumericalWithoutDate[[1]]~datasetNumericalWithoutDate[[2]]), col="green")
reg <- lm(datasetNumericalWithoutDate[[1]]~datasetNumericalWithoutDate[[2]]
)
reg
abline(reg,col="yellow", lwd=2)
plot(datasetNumericalWithoutDate[[1]], datasetNumericalWithoutDate[[2]])
abline(reg,col="yellow", lwd=2)
abline(reg,col="yellow", lwd=2)
abline(reg,col="yellow", lwd=2)
abline(reg,col="yellow", lwd=2)
abline(reg,col="yellow", lwd=2)
abline(reg,col="yellow", lwd=2)
line(reg,col="yellow", lwd=2)
abline(reg,col="yellow", lwd=2)
plot(xlab="Index", ylab="Value", y=datasetNumericalWithoutDate[[1]], x=datasetNumericalWithoutDate[[2]], type="o", lwd=1)
plot(xlab="Index", ylab="Value", y=datasetNumericalWithoutDate[[1]], x=datasetNumericalWithoutDate[[2]],, lwd=1)
abline(reg,col="yellow", lwd=2)
plot(xlab="Param2", ylab="Param1", y=datasetNumericalWithoutDate[[1]], x=datasetNumericalWithoutDate[[2]],, lwd=1)
abline(reg,col="yellow", lwd=2)
correlationResult
datasetPredicted
listRepeatedAnalysisResult
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
statisticalResume
interpreterNow
datasetNow
GeneralFuzzyGenerator(Param1, statisticalResume)
GeneralFuzzyGenerator("Param1", statisticalResume)
corpus <- GeneralFuzzyGenerator("Param1", statisticalResume)
result <- MembershipFuzzy(0.19, corpus);
interpreterNow
DataInterpreter(datasetLast,statisticalResume)
DataInterpreter(averageResume,statisticalResume)
DataInterpreter(datasetNow,statisticalResume)
dfExtremeEvent
View(dfExtremeEvent)
