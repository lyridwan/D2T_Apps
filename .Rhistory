v3<-minRange+(2*rangenode);
v4<-minRange+(3*rangenode);
##/ Â¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membershipValue[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membershipValue[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membershipValue[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membershipValue[i] <- 0;
}
j <- i+1
}else{
v1<-minRange+(j)*rangenode;
v2<-minRange+(j+1)*rangenode;
v3<-minRange+(j+3)*rangenode;
v4<-minRange+(j+4)*rangenode;
##/ Â¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membershipValue[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membershipValue[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membershipValue[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membershipValue[i] <- 0;
}
j <- j+3
}
}
# result <- corpus[2, "Category"]
result <- corpus[which.max(membershipValue), "Category"]
# result<- paste("Not available for general -aa",which.max(membershipValue))
##corpus <- read.table(file="Corpus/GeneralAdjective.csv", sep=",", header=TRUE)
##result <- MembershipFuzzy(value, corpus);
}
}
# print(result)
return(result)
}
DataInterpreter <- function(dataset,statisticalResume){
i <- 1;
n <- length(dataset);
interpreterResult <- dataset;
for(i in i:n){
interpreterResult[i] <- DataInterpreterAdjective(dataset[i], type = names(dataset[i]), statisticalResume)
# print(DataInterpreterAdjective(dataset[i], type = names(dataset[i])))
}
# print(interpreterResult)
return(interpreterResult)
}
# interpreterResultYesterday <-DataIntepreter(datasetYesterday)
# interpreterResultToday <-DataIntepreter(datasetToday)
# interpreterResultLast2Month <- DataIntepreter(averageLast2Month)
# interpreterResultLastMonth <- DataIntepreter(averageLastMonth)
# interpreterResultYear <- DataIntepreter(averageYear)
# dummyCorpus <- read.table(file=paste0("Corpus/","Rainfall","Adjective.csv"), sep=",", header=TRUE)
# result <- MembershipFuzzy(10, dummyCorpus);
#result <- DataInterpreterAdjective(yesterdayDataset[1], type = names(yesterdayDataset[1]))
# cat("------------ Data Interpretation Output -----------\n\n")
# cat("------------ Yesterday -----------\n\n")
# for(i in 1:length(columnName)){
#   cat(" Yesterday ", columnName[i], ": ", as.character(unlist(interpreterResultYesterday[i])),"\n\n")
# }
# cat("------------ Data Interpretation Output -----------\n\n")
# cat("------------ Today -----------\n\n")
# for(i in 1:length(columnName)){
#   cat(" Today ", columnName[i], ": ", as.character(unlist(interpreterResultToday[i])),"\n\n")
# }
SubstrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
Ordinal_indicator <- function(num){
if(num==11){
oi<-"th"
return(oi)
}
x<-nchar(num)
y<-substrRight(num,1)
oi<-""
if(y==1){
oi<-"st"
}
else if(y==2){
oi<-"nd"
}
else if(y==3){
oi<-"rd"
}
else{
oi<-"th"
}
return(oi)
}
ReadIntro <- function(source="Data", type="General"){
type
if(type == "Current" ||
type == "Trend" || type == "Event" ||
type == "Predict"){
corpus <- as.matrix(read.table(file=paste0("Corpus/",type,"Intro.csv"), header=FALSE, sep=';'))
# print(corpus)
n <- length(corpus)
random_value <- as.integer(runif(1,1,n+0.5))
result <- corpus[random_value]
return (result)
}else{
return("Woops no data intro!");
}
# return("Woops no data intro!");
}
ReadResumeIntro <- function(dataset, ColName, source="dataset"){
corpus <- as.matrix(read.table(file=paste0("Corpus/","ResumeIntro.csv"), header=FALSE, sep=';'))
#Randoming corpus
n <- length(corpus)
random_value <- as.integer(runif(1,1,n))
result <- corpus[random_value]
#Replaceing Data Source
result <- gsub("@source", "dataset", result)
#Replacing Data Range
date1 <- dataset[1, ]
date2 <- dataset[nrow(dataset),]
result <- gsub("@date1", date1, result)
result <- gsub("@date2", date2, result)
#Replacing prural identifier
if(length(ColName) == 1){
result <- gsub("parameter@s", "parameter:", result)
}else{
result <- gsub("parameter@s", "parameters:", result)
}
#Replacing Parameter with array
param <- ""
i <- 2
for (i in i:length(ColName)-1) {
if(i == 2){
param <- paste0(param,ColName[i])
}
else{
param <- paste0(param,",",ColName[i])
}
# print(param)
}
param <- paste(param,"and",ColName[i+1])
result <- gsub("@param", param, result)
return (result)
}
ChangeTimeDesc <- function(source, dataset, type = "0"){
n <- nrow(dataset)
timeFirst <- as.character(dataset[n-1,'DateTime'])
timeLast <- as.character(dataset[n,'DateTime'])
timeFirst <- strptime(timeFirst, "%Y/%m/%d %H:%M:%OS")
timeLast <- strptime(timeLast, "%Y/%m/%d %H:%M:%OS")
now <- as.character(Sys.time())
now <- strptime(now, "%Y-%m-%d")
dayData <- as.character(dataset[nrow(dataset),'DateTime'])
dayData <- strptime(dayData, "%Y/%m/%d")
same <- 0
print(timeFirst)
if(type == "0"){
if(now == dayData){
same <- 1
}else{
same <- 0
}
}else{
if(now == dayData){
same <- 1
}else{
same <- 2
}
}
difTime <- as.numeric(timeLast-timeFirst,units="secs")
corpus <- read.table(file=paste0("Corpus/TimeDesc.csv"), sep=",", header=TRUE)
timeDesc <- as.character(corpus[corpus$SecMin < difTime & corpus$SecMax >= difTime & corpus$Same == same,"Desc"])
result <- source
# print(source)
# print("~~~")
print(length(source))
print(timeFirst)
print(timeLast)
print(same)
print(timeDesc)
print(corpus)
if(grepl("@TimeDesc", source)){
# result <- str_replace(source, "@TimeDesc", timeDesc)
result <- gsub("@TimeDesc",timeDesc,source)
# result <- sapply(1:nrow(source), function(x) gsub("@TimeDesc",timeDesc,source[x]))
}
# print(result)
# print("11111")
return (result)
}
ResumeTrend <- function(statisticalResume){
freq <- table(statisticalResume["Trend"])
result <- ""
#FIRST CONDITION
if(freq["+"] <= freq["-"] && freq["+"] <= freq["0"]){
if(freq["-"] < freq["0"]){
#1ST GROUP
listTrend <- statisticalResume[statisticalResume$Trend == "+", ]
i<-1
n <- nrow(listTrend)
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(result,",",listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is increased", "but ")
#2ND GROUP
listTrend <- statisticalResume[statisticalResume$Trend == "-", ]
i<-1
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(result,",",listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is decreased and the rest is constant.")
}else{
#1ST GROUP
listTrend <- statisticalResume[statisticalResume$Trend == "+", ]
i<-1
n <- nrow(listTrend)
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(result,",",listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is increased", "and ")
#2ND GROUP
listTrend <- statisticalResume[statisticalResume$Trend == "0", ]
i<-1
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(result,",",listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is constant but the rest is decreased.")
}
#SECOND CONDITION
}else if(freq["-"] <= freq["+"] && freq["-"] <= freq["0"]){
if(freq["+"] < freq["0"]){
listTrend <- statisticalResume[statisticalResume$Trend == "-", ]
i<-1
n <- nrow(listTrend)
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(result,",",listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is decreased", "but ")
listTrend <- statisticalResume[statisticalResume$Trend == "+", ]
i<-1
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(",",result,listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is increased and the rest is constant.")
}else{
listTrend <- statisticalResume[statisticalResume$Trend == "-", ]
i<-1
n <- nrow(listTrend)
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(result,",",listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is decreased", "and ")
listTrend <- statisticalResume[statisticalResume$Trend == "0", ]
i<-1
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(result,",",listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is constant but the rest is increased")
}
}else if(freq["0"] <= freq["-"] && freq["0"] <= freq["+"]){
if(freq["+"] < freq["-"]){
listTrend <- statisticalResume[statisticalResume$Trend == "0", ]
i<-1
n <- nrow(listTrend)
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(",",result,listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is constant", "and ")
listTrend <- statisticalResume[statisticalResume$Trend == "+", ]
i<-1
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(",",result,listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is increased and the rest is decreased.")
}else{
listTrend <- statisticalResume[statisticalResume$Trend == "0", ]
i<-1
n <- nrow(listTrend)
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(",",result,listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is constant", "and ")
listTrend <- statisticalResume[statisticalResume$Trend == "-", ]
i<-1
for(i in i:n){
if(i==1){
result <- paste0(result,listTrend[i,"ColName"])
}else{
result <- paste0(",",result,listTrend[i,"ColName"])
}
}
result <- paste(result, "trend is decreased but the rest is increased")
}
}
return(result)
}
ResumeIntroSentence <- function(){
}
ResumeEvent <- function(){
}
CurrentDesc <- function(interpreterNow,statisticalResume, dataset){
result <- ''
i <- 1
for (i in i:length(interpreterNow)) {
if(i == 1 || i == length(interpreterNow)){
result <- paste0(result, colnames(interpreterNow[i])," is ",interpreterNow[1,i])
}else{
result <- paste0(result,", ", colnames(interpreterNow[i])," is ",interpreterNow[1,i])
}
if(as.character(statisticalResume[statisticalResume$ColName == colnames(interpreterNow[i]),"MaxIndex"]) == as.character(nrow(dataset))){
result <- paste0(result," this is the highest value of @TimeDesc ")
}else if(as.character(statisticalResume[statisticalResume$ColName == colnames(interpreterNow[i]),"MinIndex"]) == as.character(nrow(dataset))){
result <- paste0(result," this is the lowest value of @TimeDesc ")
}
trendLastFive <- TrendAnalysis(nrow(dataset)-3, dataset[[colnames(interpreterNow[i])]])
if(trendLastFive == "-"){
trendLastFive <- "decreased"
}else if(trendLastFive == "+"){
trendLastFive <- "increased"
}else{
trendLastFive <- "constant"
}
result <- paste0(result," trend in last 3 data is ",trendLastFive)
if(i == length(interpreterNow)-1){
result <- paste0(result," and ")
}
}
if(grepl("@TimeDesc",result)){
result <- ChangeTimeDesc(result, dataset["DateTime"], type="other")
}
return(result)
}
CurrentAglast <- function(){
}
CurrentAgresume <- function(){
}
PredictIntro <- function(){
}
PredictContent <- function(){
}
PredictConc <- function(){
}
TrendAnalysis <- function(start,dataset){
# Dataset is vector, pokonamah ka gigir
dataset <- dataset[start:length(dataset)]
if(length(unique(dataset)) == 1){
result <- "0"
}else{
x = c(1:length(dataset))
plot(x, dataset)
# lines(sequence, dataset)
reg = lm(dataset~x)
if(reg$coefficients["x"] > 0 ){
result <- "+"
}else if(reg$coefficients["x"] < 0){
result <- "-"
}
# print(reg)
# abline(reg,col="red")
}
return(result)
}
# READ DATA
dataset <- read.table(file="Datasets/dummy1.csv", sep=",", header=TRUE)
datasetWithoutDate <- dataset[ , colnames(dataset) != "DateTime"]
# airQualityDataset <- read.table(file="Datasets/AQ_2016_2017.csv", sep=",", header=TRUE)
#
columnName <- colnames(dataset[ , colnames(dataset) != "DateTime"])
setwd("D:/data/kuliah/Skripsi/GitSkripsi/D2T_Apps")
# setwd("~/GitHub/D2T_Apps")
#install.packages("tcltk2");
library(tcltk2);
# INITIALIZING
source("D2T_Machine.R", local = TRUE)
getDataSet <- function(){
listFile <- list.files(path=paste(getwd(),"DatasetRealTime/",sep = "/"), pattern = "*.csv");
if(length(listFile) == 0){
print("nothing");
}else{
print("get");
dataset <- "";
for(fileName in listFile){
#print(fileName);
dataset <- read.table(file=paste("DatasetRealTime", fileName, sep = "/"), sep=",", header=TRUE);
baseFileName <- substr(fileName, 1, nchar(fileName)-4);
file.rename(paste(getwd(),"DatasetRealTime",fileName, sep = "/"),paste(getwd(),"Datadone",paste(baseFileName,"_done.csv", sep = ""), sep = "/"));
}
datasetWithoutDate <- dataset[ , colnames(dataset) != "DateTime"]
# airQualityDataset <- read.table(file="Datasets/AQ_2016_2017.csv", sep=",", header=TRUE)
#
columnName <- colnames(dataset[ , colnames(dataset) != "DateTime"])
# Predict
datasetPredicted <- PredictDataset(dataset)
# SYGNAL ANALYSIS
# row [N] data, now
datasetNow <- dataset[nrow(dataset), !colnames(dataset) == "DateTime"]
# row[N-1] data, before now
datasetLast <- dataset[nrow(dataset)-1, !colnames(dataset) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(dataset[, !colnames(dataset) == "DateTime"]))
# Statistical Resume
statisticalResume <- StatisticalAnalysis(dataset)
i <- 1
vectorTrendAnalysisResult <- c()
for(i in i:length(datasetWithoutDate)){
vectorColumn <- datasetWithoutDate[[i]]
vectorTrendAnalysisResult[i] <- TrendAnalysis(1, vectorColumn)
}
#merging DF with trend column
statisticalResume$Trend <- vectorTrendAnalysisResult
# DATA INTERPRETATION
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
# i=1;
# # Today
# for (i in i:length(columnName)) {
#   cat(" Today", columnName[i], " :", as.character(unlist(interpreterNow[i])), "\n\n")
# }
# i=1;
# # Last
# for (i in i:length(columnName)) {
#   cat(" Last", columnName[i], " :", as.character(unlist(interpreterLast[i])), "\n\n")
# }
# i=1;
# # Resume
# for (i in i:length(columnName)) {
#   cat(" Resume", columnName[i], " :", as.character(unlist(interpreterResume[i])), "\n\n")
# }
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste(trendIntro,ResumeTrend(statisticalResume))
eventIntro <- ReadIntro(type="Event")
resumeEvent <- paste(eventIntro,"6 value from Xth to Yth")
currentIntro <- ChangeTimeDesc(ReadIntro(type="Current"),dataset["DateTime"])
currentDesc <- CurrentDesc(interpreterNow, statisticalResume, dataset)
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
predictIntro <- ReadIntro(type="Predict")
predictContent <- "Content content content."
predictConc <- "Conclussion from predict result."
resumeResult <- paste(resumeIntro, resumeTrend, resumeEvent)
# currentResult <- paste(currentIntro, currentDesc, currentAglast, currentAgresume)
currentResult <- paste(currentIntro, currentDesc)
predictResult <- paste(predictIntro, predictContent, predictConc)
resumeResult
currentResult
predictResult
}
}
tclTaskSchedule(1000, getDataSet(), id = "getDataSet", redo = TRUE)
tclTaskDelete("getDataSet")
rm(list=ls())
library(tcltk2);
# INITIALIZING
source("D2T_Machine.R", local = TRUE)
listFile <- list.files(path=paste(getwd(),"DatasetRealTime/",sep = "/"), pattern = "*.csv");
listFile <- list.files(path=paste(getwd(),"DatasetsRealTime/",sep = "/"), pattern = "*.csv");
