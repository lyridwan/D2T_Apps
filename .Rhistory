print("---FINISH---")
datasetnow
datasetNow
dataset[-24,]
dataset[nrow(dataset)-24,]
datasetNow
dataset[nrow(dataset)-0,]
mainConfig[which(mainConfig$Type == ("character") | mainConfig$Type == ("categorical")| mainConfig$Type == ("factor")),]
mainConfig[which(mainConfig$Type == ("character") | mainConfig$Type == ("categorical")| mainConfig$Type == ("factor")),]$ColName
mainConfig
rbind(mainConfig, c("asd", "categorical", NA, NA))
mainConfig[which(mainConfig$Type == ("character") | mainConfig$Type == ("categorical")| mainConfig$Type == ("factor")),]$ColName
mainConfig[(mainConfig$Type == ("character") | mainConfig$Type == ("categorical")| mainConfig$Type == ("factor")),]$ColName
mainConfig
mainConfig<- rbind(mainConfig, c("asd", "categorical", NA, NA))
mainConfig[(mainConfig$Type == ("character") | mainConfig$Type == ("categorical")| mainConfig$Type == ("factor")),]$ColName
mainConfig[which(mainConfig$Type == ("character") | mainConfig$Type == ("categorical")| mainConfig$Type == ("factor")),]$ColName
asd <- mainConfig[(mainConfig$Type == ("character") | mainConfig$Type == ("categorical")| mainConfig$Type == ("factor")),]$ColName
asd
"asd" %in% asd
"asds" %in% asd
MotifDiscoveryAnalysis <- function(colName, dataset, datasetIntervalValue){
#list Parameter Categorical
listParam <- mainConfig[which(mainConfig$Type == ("character") | mainConfig$Type == ("categorical")| mainConfig$Type == ("factor")),]$ColName
if(colName %in% listParam){
n <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
index <- length(dataset)+1 - n
#pattern
pattern <- dataset[index:length(dataset)]
#dataest
dataset <- dataset[1:index]
result <- list()
if(!is.null(KMP(dataset, pattern))){
result$total <- length(KMP(dataset,pattern))
result$pattern <- KMP(dataset,pattern)
}else{
result$total <- 0
result$pattern <- NA
}
}else{
result$total <- 0
result$pattern <- NA
}
return(result)
}
MDinterpreterResult <- MotifDiscoveryInterpreter(datasetWithoutDate, datasetIntervalValue)
MotifDiscoveryAnalysis <- function(colName, dataset, datasetIntervalValue){
#list Parameter Categorical
listParam <- mainConfig[which(mainConfig$Type == ("character") | mainConfig$Type == ("categorical")| mainConfig$Type == ("factor")),]$ColName
result <- list()
if(colName %in% listParam){
n <- DataInterpreterInterval(datasetIntervalValue, type = "limit")
index <- length(dataset)+1 - n
#pattern
pattern <- dataset[index:length(dataset)]
#dataest
dataset <- dataset[1:index]
if(!is.null(KMP(dataset, pattern))){
result$total <- length(KMP(dataset,pattern))
result$pattern <- KMP(dataset,pattern)
}else{
result$total <- 0
result$pattern <- NA
}
}else{
result$total <- 0
result$pattern <- NA
}
return(result)
}
MDinterpreterResult <- MotifDiscoveryInterpreter(datasetWithoutDate, datasetIntervalValue)
MDinterpreterResult
dataset
columnName
length(columnName)
columnName[5]
dataset[["CBWD"]]
dataset[["cbwd"]]
dataset[["cbwd"]][1]
dataset[["cbwd"]][477:483]
tail(dataset[["cbwd"]], 6)
MDinterpreterResult
resumeMotifDiscovery
dataset[["cbwd"]][770:776]
tail(dataset[["cbwd"]], 6)
tail(dataset[["cbwd"]], 7)
dataset[["cbwd"]][770:775]
dataset[["cbwd"]][769:775]
interpreterNow
interpreterLast
interpreterResume
interpreterPredict
corpus <- read.table(file=paste0("Corpus/Crisp/","Temperature","Adjective.csv"), sep=",", header=TRUE)
corpus <- read.table(file=paste0("Corpus/Fuzzy/","Temperature","Adjective.csv"), sep=",", header=TRUE)
corpus
MembershipClassifier(-1, corpus)
MembershipFuzzy(-1, corpus)
MembershipClassifier(60, corpus)
MembershipFuzzy(60, corpus)
corpus
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
if(is.null(corpus)){
return (list(InterpreterResult = as.character("Constant"), InterpreterIndex = 0))
}
i <- 1;
n <- nrow(corpus);
m <- length(corpus);
membershipValue <- c()
for(i in i:n){
v1<-corpus[i, "v1"];
v2<-corpus[i, "v2"];
v3<-corpus[i, "v3"];
v4<-corpus[i, "v4"];
##/ ¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membershipValue[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membershipValue[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membershipValue[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membershipValue[i] <- 0;
}
if(is.nan(as.numeric(membershipValue[i]))){
membershipValue[i] <- 9999
}
}
if(value < corpus[i, "v1"]){
membershipValue[1] <- 9999
}else if(value > corpus[length(membershipValue), "v4"]){
membershipValue[length(membershipValue)] <- 9999
}
print(membershipValue)
#check highest membership result
interpreterResult <- corpus[which.max(membershipValue), "Category"]
interpreterIndex <- which(interpreterResult == corpus$Category)
return (list(InterpreterResult = as.character(interpreterResult), InterpreterIndex = interpreterIndex))
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
MembershipFuzzy(60, corpus)
MembershipFuzzy(-60, corpus)
MembershipFuzzy(17.9001, corpus)
MembershipFuzzy(17, corpus)
corpus
corpus[1, "v1"]
as.double(corpus[2, "v1"])
as.double(corpus[2, "v1"]) > 17.9001
as.double(corpus[2, "v1"]) < 17.9001
(corpus[2, "v1"]) < 17.9001
MembershipFuzzy(17.9001, corpus)
MembershipFuzzy(-17.9001, corpus)
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
if(is.null(corpus)){
return (list(InterpreterResult = as.character("Constant"), InterpreterIndex = 0))
}
value <- as.double(value)
i <- 1;
n <- nrow(corpus);
m <- length(corpus);
membershipValue <- c()
for(i in i:n){
v1<-corpus[i, "v1"];
v2<-corpus[i, "v2"];
v3<-corpus[i, "v3"];
v4<-corpus[i, "v4"];
##/ ¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membershipValue[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membershipValue[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membershipValue[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membershipValue[i] <- 0;
}
if(is.nan(as.numeric(membershipValue[i]))){
membershipValue[i] <- 9999
}
}
print(membershipValue)
if(value < corpus[i, "v1"]){
membershipValue[1] <- 9999
}else if(value > corpus[length(membershipValue), "v4"]){
membershipValue[length(membershipValue)] <- 9999
}
#check highest membership result
interpreterResult <- corpus[which.max(membershipValue), "Category"]
interpreterIndex <- which(interpreterResult == corpus$Category)
return (list(InterpreterResult = as.character(interpreterResult), InterpreterIndex = interpreterIndex))
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
MembershipFuzzy(-17.9001, corpus)
MembershipFuzzy(17.9001, corpus)
#TO BE UPDATED!!!!
MembershipFuzzy <- function(value, corpus){
if(is.null(corpus)){
return (list(InterpreterResult = as.character("Constant"), InterpreterIndex = 0))
}
value <- as.double(value)
i <- 1;
n <- nrow(corpus);
m <- length(corpus);
membershipValue <- c()
for(i in i:n){
v1<-corpus[i, "v1"];
v2<-corpus[i, "v2"];
v3<-corpus[i, "v3"];
v4<-corpus[i, "v4"];
##/ ¯ \ <- 1st area, 2nd area, 3rd area
#first area
if((value>=v1)&&(value<=v2)){
membershipValue[i] <- (  (value-v1) / (v2-v1)  );
#second area (optimum)
}else if((value>v2)&&(value<=v3)){
membershipValue[i] <- 1;
#third area
}else if((value>v3)&&(value<=v4)){
membershipValue[i] <- (  (v4-value) / (v4-v3)  );
#fourth, default condition (outside)
}else{
membershipValue[i] <- 0;
}
if(is.nan(as.numeric(membershipValue[i]))){
membershipValue[i] <- 9999
}
}
print(membershipValue)
if(value < corpus[1, "v1"]){
membershipValue[1] <- 9999
}else if(value > corpus[length(membershipValue), "v4"]){
membershipValue[length(membershipValue)] <- 9999
}
#check highest membership result
interpreterResult <- corpus[which.max(membershipValue), "Category"]
interpreterIndex <- which(interpreterResult == corpus$Category)
return (list(InterpreterResult = as.character(interpreterResult), InterpreterIndex = interpreterIndex))
# interval <- vector("list", n);
# for (i in i:n) {
#   interval[[i]] <- strsplit(as.character(corpus[i,"Interval"]), " ")[[1]];
#   names(interval)[i] <- as.character(corpus[i, "Category"])
# }
# print(interval)
# return(interval)
}
MembershipFuzzy(17.9001, corpus)
dataset predict
datasetPredict
datasetPredicted
View(print(membershipValue))
View(datasetPredicted)
datasetNow
MembershipFuzzy(datasetPredicted[["TEMP"]], corpus)
print(datasetPredicted["TEMP"])
datasetNow
print(datasetPredicted["LWS"])
print(datasetPredicted["lws"])
print(datasetPredicted["Iws"])
datasetPredicted
names(datasetPredicted)
round(datasetPredicted, 3)
datasetNow
tail(dataset, 15)
datasetNow
datasetLas
datasetLast
setwd("~/GitHub/D2T_Apps")
# INITIALIZING
source("D2T_Machine.R", local = TRUE)
#-----------------------
# GENERAL DATA HANDLER |
#-----------------------
# Force read, with default parameter v2,v3,v4,etc if there's no header available
filename <- "BeijingPM25#1"
dataset <- as.data.frame(fread(file=paste0("DatasetsExperiment/",filename,".csv")))
colnames(dataset)[1] <- "DateTime"
# Dataset with datetime Column dropped
datasetWithoutDate <- dataset[ , colnames(dataset) != "DateTime"]
# Parameter Header
columnName <- colnames(datasetWithoutDate)
#-----------------------
#   PARAMETER CONFIG   |
#-----------------------
mainConfig <- ReadConfig()
#-----------------------
#   SPLITTING DATASET  | 1. Numerical Dataset
#-----------------------
# Listing all categorical parameter
categoricalType <- c("categorical", "factors", "character")
catColName <- mainConfig[mainConfig$Type %in% categoricalType, "ColName"]
# Numerical Dataset initialization
datasetNumerical <- dataset[, !names(dataset) %in% catColName]
datasetNumericalWithoutDate <- datasetNumerical[ , colnames(datasetNumerical) != "DateTime"]
columnNameNumerical <- colnames(datasetNumericalWithoutDate)
#-----------------------
#   SPLITTING DATASET  | 2. Categorical Dataset
#-----------------------
if(length(catColName) != 0){
if(length(catColName) == 1){
datasetCategoricalWithoutDate <- dataset[, catColName]
datasetCategorical <- cbind(dataset["DateTime"], datasetCategoricalWithoutDate)
colnames(datasetCategorical)[2] <- catColName
}else{
datasetCategoricalWithoutDate <- dataset[, colnames(dataset) %in% catColName]
datasetCategorical <- cbind(dataset["DateTime"], datasetCategorical)
}
}
#-----------------------
#  DATE TIME INTERVAL  |
#-----------------------
# Dataset Interval
datasetIntervalValue <- DateInterval(dataset[2,"DateTime"], dataset[1,"DateTime"])
# SYGNAL ANALYSIS: 1.Data Summarizing
# -------------Begin-------------
# Statistical Resume
statisticalResume <- StatisticalAnalysis(datasetNumerical)
i <- 1
vectorTrendAnalysisResult <- c()
for(i in i:length(datasetNumericalWithoutDate)){
vectorColumn <- datasetNumericalWithoutDate[[i]]
minValue <- as.numeric(as.character(statisticalResume$MinValue)[i])
maxValue <- as.numeric(as.character(statisticalResume$MaxValue)[i])
vectorTrendAnalysisResult[i] <- TrendAnalysis(1, vectorColumn, minValue, maxValue)
}
#merging main analysis DF with trend column
statisticalResume$Trend <- vectorTrendAnalysisResult
# ------------End------------
# SYGNAL ANALYSIS: 2.Extreme Event
# ------------Begin------------
dfExtremeGrowth <- ResumeEventExtreme(datasetNumericalWithoutDate, statisticalResume, "Growth")
dfExtremeDecay <- ResumeEventExtreme(datasetNumericalWithoutDate, statisticalResume, "Decay")
dfExtremeEvent <- cbind(columnNameNumerical, dfExtremeGrowth, dfExtremeDecay)
# ------------End------------
# SYGNAL ANALYSIS: 3.Repeated Event
# ------------Begin------------
# Function: ResumeRepeatedAnalysis()
# Purpose: Analyzing Repeated Event
# Result variable: listRepeatedAnalysisResult
i <- 1
listRepeatedAnalysisResult <- list()
for(i in i:length(datasetNumericalWithoutDate)){
vectorColumn <- datasetNumericalWithoutDate[[i]]
listRepeatedAnalysisResult[[i]] <- ResumeRepeatedAnalysis(vectorColumn)
}
# ------------End------------
# SYGNAL ANALYSIS: 4.Predicting
# ------------Begin------------
datasetPredicted <- PredictDataset(datasetNumerical)
# ------------End------------
# SYGNAL ANALYSIS: 5.Motif Discovery
# ------------Begin------------
MDinterpreterResult <- MotifDiscoveryInterpreter(datasetWithoutDate, datasetIntervalValue)
# ------------End------------
# SYGNAL ANALYSIS: 6.Correlation
# ------------Begin------------
correlationResult <- CorrelationAnalysis(datasetNumericalWithoutDate)
# ------------End------------
# DATA INTERPRETATION: 0.Preparation
# ------------Begin------------
# row [N] data, now
datasetNow <- datasetNumerical[nrow(datasetNumerical), !colnames(datasetNumerical) == "DateTime"]
# row[N-1] data, before now
datasetLast <- datasetNumerical[nrow(datasetNumerical)-1, !colnames(datasetNumerical) == "DateTime"]
# row[N-2] data, before now
dataset2Last <- datasetNumerical[nrow(datasetNumerical)-2, !colnames(datasetNumerical) == "DateTime"]
# Average Resume
averageResume <- as.data.frame.list(colMeans(datasetNumerical[, !colnames(datasetNumerical) == "DateTime"]))
# ------------End------------
# SYGNAL ANALYSIS: 2.Extreme Event
# ------------Begin------------
comparsionResult <- ComparsionAnalysis(datasetNow, datasetNumerical, datasetIntervalValue)
# ------------End------------
# DATA INTERPRETATION: 1. Inpterpretating data
# ------------Begin------------
interpreterNow <- DataInterpreter(datasetNow,statisticalResume)
interpreterLast <- DataInterpreter(datasetLast,statisticalResume)
interpreter2Last <- DataInterpreter(dataset2Last, statisticalResume)
interpreterResume <- DataInterpreter(averageResume,statisticalResume)
interpreterPredict <- DataInterpreter(datasetPredicted,statisticalResume)
# ------------End------------
# RESUME LEXICAL PROCESS
i <- 1
vectorTrendDescriptionAnalysis <- c()
for(i in i:length(datasetNumericalWithoutDate)){
last2Index <- interpreter2Last$InterpreterIndex[i]
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
vectorSequenceIndex <- c(last2Index, lastIndex, nowIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionAnalysis[i] <- LD_Compare(vectorSequenceIndex)
}
resumeIntro <- ReadResumeIntro(dataset["DateTime"], columnName)
trendIntro <- ReadIntro(type="Trend")
resumeTrend <- paste0(trendIntro," ",ResumeTrend(statisticalResume))
resumeComparsion <- ComparsionMessage(datasetNow, comparsionResult, datasetIntervalValue)
resumeRepeated <- RepeatedEventDocPlanning(listRepeatedAnalysisResult)
MDdocPlanResult <- MotifDiscoveryDocPlan(MDinterpreterResult)
resumeMotifDiscovery <- MotifDiscoveryMicroPlan(MDdocPlanResult, MDinterpreterResult)
resumeCorrelationRoutine <- CorrelationRoutineMessage(correlationResult)
resumeCorrelationSignificant <- CorrelationSignificantMessage(correlationResult)
resumeCorrelation <- paste(resumeCorrelationRoutine, resumeCorrelationSignificant)
resumeExtremeEvent <- DocPlanHighestGrowthDecay(dataset[["DateTime"]], dfExtremeEvent)
resumeResult <- paste(resumeIntro, resumeTrend, resumeComparsion, resumeRepeated, resumeExtremeEvent, resumeMotifDiscovery, resumeCorrelation)
#
currentIntro <- ReadCurrentIntro(dataset[nrow(dataset),"DateTime"])
currentDesc <- CurrentDesc(interpreterNow, vectorTrendDescriptionAnalysis, datasetNumericalWithoutDate)
currentHighest <- CurrentHighest(datasetNow, statisticalResume, datasetIntervalValue)
currentResult <- paste(currentIntro, currentDesc, currentHighest)
# PREDICT LEXICAL PROCESS
i <- 1
vectorTrendDescriptionPredict <- c()
for(i in i:length(datasetNumericalWithoutDate)){
lastIndex <- interpreterLast$InterpreterIndex[i]
nowIndex <- interpreterNow$InterpreterIndex[i]
predictIndex <- interpreterPredict$InterpreterIndex[i]
vectorSequenceIndex <- c(lastIndex, nowIndex, predictIndex)
# print(vectorSequenceIndex)
vectorTrendDescriptionPredict[i] <- LD_Compare(vectorSequenceIndex)
}
# currentAglast <- TrendAnalysis(length(dataset)-5, dataset[[2]])
# currentAgresume <- "and now is the higest from overall."
#
predictIntro <- ReadPredictIntro(ReadIntro(type="Predict"))
specialCorpus <- IsSpecialCorpusAvailable(interpreterPredict, columnNameNumerical)
if(!is.null(specialCorpus$Sentence)){
predictIntro <- paste(predictIntro, specialCorpus$Sentence)
}
predictContent <- PredictDesc(interpreterPredict,vectorTrendDescriptionPredict,datasetWithoutDate)
predictResult <- paste(predictIntro, predictContent)
resumeResult <- PostProcessing(resumeResult)
currentResult <- PostProcessing(currentResult)
predictResult <- PostProcessing(predictResult)
print(resumeResult)
print(currentResult)
print(predictResult)
source("plot.R", local = TRUE)
print("---FINISH---")
datasetPredicted
round(datasetPredicted, 2)
corpus
interpreterPredict
interpreterNow
interpreterResume
averageResume
round(averageResume, 2)
datasetNow
datasetPredicted
round(datasetPredicted, 2)
GeneralFuzzyGenerator("pm2.5", statisticalResume)
statisticalResume
corpus2 <- GeneralFuzzyGenerator("pm2.5", statisticalResume)
corpus2
averageResume
MembershipFuzzy()
MembershipFuzzy(100.9226, corpus2)
MembershipFuzzy(datasetNow["pm2.5"], corpus2)
MembershipFuzzy(datasetPredicted["pm2.5"], corpus2)
interpreterResume
interpreterNow
interpreterPredict
resumeExtremeEvent
resumeRepeated
resumeMotifDiscovery
resumeCorrelationRoutine
cor(datasetNumericalWithoutDate)
apply(cor(datasetNumericalWithoutDate), 2, mean)
apply(abs(cor(datasetNumericalWithoutDate)), 2, mean)
resumeCorrelationSignificant
resumeIntro
trendIntro
resumeTrend
resumeComparsion
resumeResult
resumeRepeated
currentResult
predictResult
vectorTrendDescriptionPredict
datasetLast
corpus
asd <-
GeneralFuzzyGenerator("pm2.5", statisticalResume)
asd
datasetLast
interpreterLast
tail(dataset,3)
GeneralFuzzyGenerator("Is", statisticalResume)
print(resumeResult)
print(currentResult)
print(predictResult)
shiny::runApp()
GeneralFuzzyGenerator("TEMP", statisticalResume)
